// Generated by CoffeeScript 1.6.3
(function() {
  var apply, compare, delCheck, diff, _;

  diff = function(old, new_, time) {
    var changes;
    changes = [];
    changes = changes.concat(compare([], old, new_, time));
    return changes;
  };

  delCheck = function(op) {
    if (op.type === "put" && op.value === undefined) {
      op.type = "del";
      delete op.value;
    }
    return op;
  };

  compare = function(path, old, new_, time) {
    var changes, delKeys, newKeys, newKeys_, oldKeys, sameKeys;
    changes = [];
    if (old !== null && new_ !== null && typeof old === "object" && !_.isDate(old)) {
      oldKeys = Object.keys(old);
      newKeys = Object.keys(new_);
      sameKeys = _.intersection(oldKeys, newKeys);
      sameKeys.forEach(function(k) {
        var childChanges;
        childChanges = compare(path.concat(k), old[k], new_[k], time);
        changes = changes.concat(childChanges);
      });
      delKeys = _.difference(oldKeys, newKeys);
      delKeys.forEach(function(k) {
        changes.push({
          type: "del",
          key: path.concat(k),
          tm: time
        });
      });
      newKeys_ = _.difference(newKeys, oldKeys);
      newKeys_.forEach(function(k) {
        changes.push(delCheck({
          type: "put",
          key: path.concat(k),
          value: new_[k],
          tm: time
        }));
      });
    } else if (old !== new_) {
      changes.push(delCheck({
        type: "put",
        key: path,
        value: new_,
        tm: time
      }));
    }
    return changes;
  };

  apply = function(changes, target, modify) {
    var err, obj;
    obj = void 0;
    if (modify) {
      obj = target;
    } else {
      try {
        obj = JSON.parse(JSON.stringify(target));
      } catch (_error) {
        err = _error;
        obj = undefined;
      }
    }
    changes.forEach(function(ch) {
      var keys, len, ptr;
      ptr = void 0;
      keys = void 0;
      len = void 0;
      switch (ch.type) {
        case "put":
          ptr = obj;
          keys = ch.key;
          len = keys.length;
          if (len) {
            return keys.forEach(function(prop, i) {
              if (!(prop in ptr)) {
                ptr[prop] = {};
              }
              if (i < len - 1) {
                ptr = ptr[prop];
              } else {
                ptr[prop] = ch.value;
              }
            });
          } else {
            return obj = ch.value;
          }
          break;
        case "del":
          ptr = obj;
          keys = ch.key;
          len = keys.length;
          if (len) {
            return keys.forEach(function(prop, i) {
              if (!(prop in ptr)) {
                ptr[prop] = {};
              }
              if (i < len - 1) {
                ptr = ptr[prop];
              } else {
                delete ptr[prop];
              }
            });
          } else {
            return obj = null;
          }
      }
    });
    return obj;
  };

  _ = require("underscore");

  module.exports = diff;

  module.exports.apply = apply;

}).call(this);
