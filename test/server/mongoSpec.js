// Generated by CoffeeScript 1.6.3
(function() {
  var MongoClient, Mongofunctions, Tree_note, async, mongo, mymongo, _;

  MongoClient = require('mongodb').MongoClient;

  mongo = MongoClient = require('mongodb');

  async = require('async');

  _ = require('underscore');

  Tree_note = (function() {
    function Tree_note(args) {
      var mythis;
      this.id = void 0;
      this.title = void 0;
      this.note = void 0;
      this.tags = [];
      mythis = this;
      _.each(args, function(val, key) {
        return mythis[key] = val;
      });
    }

    return Tree_note;

  })();

  Mongofunctions = (function() {
    function Mongofunctions() {}

    Mongofunctions.prototype.connect = function(collection_name, callback) {
      return MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {
        this.collection = db.collection(collection_name);
        this.db = db;
        return callback(err);
      });
    };

    Mongofunctions.prototype.removecollection = function(callback) {
      return collection.remove({}, function(err, count) {
        return callback(err);
      });
    };

    Mongofunctions.prototype.disconnect = function(callback) {
      return db.close();
    };

    return Mongofunctions;

  })();

  mymongo = new Mongofunctions;

  describe('MondoDB - проверка работы разных функций', function() {
    it('Вставка значения', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), async.apply(mymongo.removecollection), function(callback) {
          return collection.insert({
            timenow: new Date()
          }, function(err, count) {
            expect(count.length).toEqual(1);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Вставка второго значения', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          var tree_note;
          tree_note = new Tree_note({
            title: 'Привет',
            tags: [1, 2, 3, 4]
          });
          return collection.insert(tree_note, function(err, count) {
            expect(count.length).toEqual(1);
            return callback(err);
          });
        }, function(callback) {
          return collection.count(function(err, count) {
            expect(count).toEqual(2);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Вставка 100 элементов в базу', function(done) {
      var insert_many, insert_one;
      insert_one = function(val, callback) {
        var tag, tree_note;
        tag = val % 2 && val > 50 ? 'новости' : 'рыба';
        tree_note = new Tree_note({
          id: val,
          title: 'Я элемент №' + val,
          time: new Date(),
          tags: ['мысли', tag]
        });
        return collection.insert(tree_note, function(err, count) {
          return callback(err);
        });
      };
      insert_many = function(callback) {
        var _i, _results;
        return async.eachLimit((function() {
          _results = [];
          for (_i = 1; _i <= 100; _i++){ _results.push(_i); }
          return _results;
        }).apply(this), 50, insert_one, function(err) {
          return callback(null);
        });
      };
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), async.apply(insert_many), function(callback) {
          return collection.count(function(err, count) {
            expect(count).toEqual(102);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Отбор элементов из базы, содержащих оба тега', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.find({
            tags: ['мысли', 'новости']
          }).toArray(function(err, results) {
            expect(results.length).toEqual(25);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Отбор элементов из базы, содержащих один тег', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.find({
            tags: 'рыба'
          }).toArray(function(err, results) {
            expect(results.length).toEqual(75);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Отбор элементов из базы, содержащих один тег', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.findOne({
            id: 28
          }, function(err, results) {
            expect(results.title).toEqual('Я элемент №28');
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Работа с курсором', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          var cursor;
          cursor = collection.find({});
          return cursor.nextObject(function(err, doc) {
            expect(doc.timenow).toBeDefined();
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Explain - помогает понять, используются ли индексы', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          var cursor;
          cursor = collection.find({
            tags: 'новости'
          });
          return cursor.limit(1).explain(function(err, doc) {
            expect(JSON.stringify(doc.indexBounds)).toMatch(/tags/);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Insert - вставка нескольких элементов', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          var elements, _i, _results;
          elements = [];
          _.each((function() {
            _results = [];
            for (_i = 1; _i <= 50; _i++){ _results.push(_i); }
            return _results;
          }).apply(this), function(el) {
            var one_element;
            one_element = new Tree_note({
              title: 'Ещё элемент №' + el
            });
            one_element.labels = {
              label1: el
            };
            return elements.push(one_element);
          });
          return collection.insert(elements, function(err, result) {
            expect(result.length).toBe(50);
            done();
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Update - изменение элемента $set', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.update({
            id: 18
          }, {
            $set: {
              note: 'ss',
              title: 'LOOP',
              tags: [1, 2, 3, 4]
            }
          }, function(err, result) {
            expect(result).toBe(1);
            done();
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Update - изменение элемента $push', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.update({
            id: 18
          }, {
            $push: {
              tags: 122
            }
          }, {
            multi: true
          }, function(err, result) {
            expect(result).toBe(1);
            done();
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Update - изменение элемента $inc - инкремент', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.update({
            id: 18
          }, {
            $inc: {
              count: 1
            }
          }, {
            multi: true
          }, function(err, result) {
            expect(result).toBe(1);
            done();
            return callback(err);
          });
        }, function(callback) {
          return collection.update({
            id: 18
          }, {
            $inc: {
              count: 1
            }
          }, {
            multi: true
          }, function(err, result) {
            expect(result).toBe(1);
            done();
            return callback(err);
          });
        }, function(callback) {
          return collection.findOne({
            id: 18
          }, function(err, result) {
            expect(result.count).toBe(2);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Update - изменение элемента Upsert', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.update({
            id: -18
          }, {
            $set: {
              note: 'ss',
              title: 'LOOP',
              tags: [1, 2, 3, 4]
            }
          }, {
            upsert: true
          }, function(err, result) {
            expect(result).toBe(1);
            done();
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Создание индекса по полю note', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          console.info("ds");
          return collection.ensureIndex({
            note: 1
          }, {
            unique: false,
            safe: true
          }, function(err, result) {
            console.info(result);
            expect(result).toBe('note_1');
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Отбор элементов из базы, Больше 10 ($gt)', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.find({
            id: {
              $gt: 10
            }
          }).toArray(function(err, results) {
            expect(results.length).toEqual(90);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Отбор элементов из базы, Меньше 10 ($lt)', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.find({
            id: {
              $lt: 10
            }
          }).toArray(function(err, results) {
            expect(results.length).toEqual(10);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Отбор элементов из базы, не равно 10 ($ne)', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.find({
            id: {
              $ne: 10
            }
          }).toArray(function(err, results) {
            expect(results.length).toEqual(152);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    return it('Отбор элементов из базы, не равно 10 ($ne)', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          return collection.find({
            tags: {
              $in: [1]
            }
          }).toArray(function(err, results) {
            expect(results.length).toEqual(3);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
  });

}).call(this);
