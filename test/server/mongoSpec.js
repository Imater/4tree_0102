// Generated by CoffeeScript 1.6.3
(function() {
  var MongoClient, Mongofunctions, Tree_note, async, mymongo, _;

  MongoClient = require('mongodb').MongoClient;

  async = require('async');

  _ = require('underscore');

  Tree_note = (function() {
    function Tree_note(args) {
      var mythis;
      this.id = void 0;
      this.title = void 0;
      this.note = void 0;
      this.tags = [];
      mythis = this;
      _.each(args, function(val, key) {
        return mythis[key] = val;
      });
    }

    return Tree_note;

  })();

  Mongofunctions = (function() {
    function Mongofunctions() {}

    Mongofunctions.prototype.connect = function(collection_name, callback) {
      return MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {
        this.collection = db.collection(collection_name);
        this.db = db;
        return callback(err);
      });
    };

    Mongofunctions.prototype.removecollection = function(callback) {
      return collection.remove({}, function(err, count) {
        return callback(err);
      });
    };

    Mongofunctions.prototype.disconnect = function(callback) {
      return db.close();
    };

    return Mongofunctions;

  })();

  mymongo = new Mongofunctions;

  describe('MondoDB - проверка работы разных функций', function() {
    it('Вставка значения', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), async.apply(mymongo.removecollection), function(callback) {
          return collection.insert({
            timenow: new Date()
          }, function(err, count) {
            expect(count.length).toEqual(1);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    it('Вставка второго значения', function(done) {
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), function(callback) {
          var tree_note;
          tree_note = new Tree_note({
            title: 'Привет',
            tags: [1, 2, 3, 4]
          });
          return collection.insert(tree_note, function(err, count) {
            expect(count.length).toEqual(1);
            return callback(err);
          });
        }, function(callback) {
          return collection.count(function(err, count) {
            expect(count).toEqual(2);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
    return it('Вставка тысячи элементов в базу', function(done) {
      var insert_many, insert_one;
      insert_one = function(val, callback) {
        var tree_note;
        tree_note = new Tree_note({
          id: val,
          title: 'Я элемент №' + val,
          time: new Date()
        });
        return collection.insert(tree_note, function(err, count) {
          return callback(err);
        });
      };
      insert_many = function(callback) {
        var _i, _results;
        return async.eachLimit((function() {
          _results = [];
          for (_i = 1; _i <= 10000; _i++){ _results.push(_i); }
          return _results;
        }).apply(this), 100, insert_one, function(err) {
          console.info('done!');
          return callback(null);
        });
      };
      return async.series([
        async.apply(mymongo.connect, 'test_insert'), async.apply(insert_many), function(callback) {
          return collection.count(function(err, count) {
            expect(count).toEqual(10002);
            return callback(err);
          });
        }
      ], function(err, result) {
        expect(1).toEqual(1);
        mymongo.disconnect();
        return done();
      });
    });
  });

}).call(this);
