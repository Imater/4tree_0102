// Generated by CoffeeScript 1.6.3
(function() {
  var async, _;

  async = require('async');

  _ = require('underscore');

  describe('Функции Async. ', function() {
    it('Водопад - функции выполняются одна за другой', function() {
      async.waterfall([
        function(callback) {
          return setTimeout(function() {
            return callback(null, "one.", "two.");
          }, 1);
        }, function(arg1, arg2, callback) {
          return callback(null, "three." + arg1 + arg2);
        }, function(arg1, callback) {
          return callback(null, "FINISH." + arg1);
        }
      ], function(err, result) {
        expect(result).toEqual('FINISH.three.one.two.');
        return asyncSpecDone();
      });
      return asyncSpecWait();
    });
    it('Each - вызывает функцию для каждого аргумента', function() {
      var a, square, _i, _results;
      a = 0;
      square = function(num, callback) {
        a += num * num;
        return setTimeout((function() {
          return callback(null);
        }), 1000);
      };
      async.each((function() {
        _results = [];
        for (_i = 1; _i <= 50; _i++){ _results.push(_i); }
        return _results;
      }).apply(this), square, function(err) {});
      expect(a).toBe(42925);
      a = 0;
      async.each([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(el) {
        return a += el;
      });
      return expect(a).toBe(55);
    });
    it('parallel - выполняется параллельно', function() {
      async.series({
        firstFunction: function(callback) {
          return setTimeout((function() {
            return callback(null, 'first_answer');
          }), 2);
        },
        secondFunction: function(callback) {
          return setTimeout((function() {
            return callback(null, 'second_answer');
          }), 1);
        }
      }, function(err, results) {
        expect(results.firstFunction).toBe('first_answer');
        expect(results.secondFunction).toBe('second_answer');
        return asyncSpecDone();
      });
      return asyncSpecWait();
    });
    it('series - выполняется друг за другом', function() {
      async.series({
        firstFunction: function(callback) {
          return setTimeout((function() {
            return callback(null, 'first_answer');
          }), 1);
        },
        secondFunction: function(callback) {
          return setTimeout((function() {
            return callback(null, 'second_answer');
          }), 1);
        }
      }, function(err, results) {
        expect(results.firstFunction).toBe('first_answer');
        expect(results.secondFunction).toBe('second_answer');
        return asyncSpecDone();
      });
      return asyncSpecWait();
    });
    it('filter делает отбор значений, даже если функция отбора асинхронная', function() {
      async.filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(e, callback) {
        return setTimeout((function() {
          return callback(e >= 3);
        }), 1);
      }, function(result) {
        expect(result).toEqual([3, 4, 5, 6, 7, 8, 9, 10]);
        return asyncSpecDone();
      });
      return asyncSpecWait();
    });
    it('filterSeries делает отбор значений друг за другом', function() {
      async.filterSeries([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(e, callback) {
        return setTimeout((function() {
          return callback(e >= 3);
        }), 1);
      }, function(result) {
        expect(result).toEqual([3, 4, 5, 6, 7, 8, 9, 10]);
        return asyncSpecDone();
      });
      return asyncSpecWait();
    });
    it('map - функция подсчёта статистики, обходит элементы', function() {
      var _i, _results;
      return async.map((function() {
        _results = [];
        for (_i = 1; _i <= 64; _i++){ _results.push(_i); }
        return _results;
      }).apply(this), function(el, callback) {
        return callback(null, el);
      }, function(err, result) {
        var sum;
        sum = 0;
        _.each(result, function(el) {
          return sum += el;
        });
        return expect(sum).toBe(2080);
      });
    });
    it('reduce - сведение результатов полученных от map', function() {
      var _i, _results;
      async.reduce((function() {
        _results = [];
        for (_i = 1; _i <= 100; _i++){ _results.push(_i); }
        return _results;
      }).apply(this), 0, function(memo, item, callback) {
        return process.nextTick(function() {
          return callback(null, memo + item);
        });
      }, function(err, result) {
        expect(result).toBe(5050);
        return asyncSpecDone();
      });
      return asyncSpecWait();
    });
    it('detect - аналог find в Underscore, находит первый элемент', function() {
      var _i, _results;
      async.detect((function() {
        _results = [];
        for (_i = 0; _i <= 10000; _i++){ _results.push(_i); }
        return _results;
      }).apply(this), function(el, callback) {
        return setTimeout(function() {
          return callback(el > 50);
        }, Math.random() * 100);
      }, function(result, rrr) {
        expect(result).toBeGreaterThan(50);
        return asyncSpecDone();
      });
      return asyncSpecWait();
    });
    it('sortBy - очень быстрая асинхронная сортировка', function() {
      var _i, _results;
      async.sortBy((function() {
        _results = [];
        for (_i = 100; _i >= 1; _i--){ _results.push(_i); }
        return _results;
      }).apply(this), function(el, callback) {
        return setTimeout(function() {
          return callback(null, el);
        }, Math.random() * 1);
      }, function(err, result) {
        expect(result[1]).toBe(2);
        return asyncSpecDone();
      });
      return asyncSpecWait();
    });
    it('some - любой первый попавшийся', function() {
      var _i, _results;
      return async.some((function() {
        _results = [];
        for (_i = 1; _i <= 150; _i++){ _results.push(_i); }
        return _results;
      }).apply(this), function(el, callback) {
        return callback(el === 10);
      }, function(result) {
        return expect(result).toBeTruthy();
      });
    });
    it('every - любой первый попавшийся', function() {
      var _i, _results;
      return async.every((function() {
        _results = [];
        for (_i = 1; _i <= 150; _i++){ _results.push(_i); }
        return _results;
      }).apply(this), function(el, callback) {
        return callback(el > 0);
      }, function(result) {
        return expect(result).toBeTruthy();
      });
    });
    it('concat - создание массива из всего, что подходит условию', function() {
      return async.concat([1, 2, 3, 4, 5], function(el, callback) {
        return callback(null, el.toString());
      }, function(err, result) {
        return expect(result[1]).toBe('2');
      });
    });
    it('whilst - WHILE для функций, пока первая функция true', function() {
      var i;
      i = 0;
      async.whilst(function() {
        return i < 10;
      }, function(callback) {
        i++;
        return setTimeout(callback, 1);
      }, function(err) {
        expect(i).toBe(10);
        return asyncSpecDone();
      });
      return asyncSpecWait();
    });
    it('compose - составная функция a( b() )', function() {
      var add1, add1mul3, dev15, mul3;
      add1 = function(n, callback) {
        return setTimeout((function() {
          return callback(null, n + 1);
        }), 10);
      };
      mul3 = function(n, callback) {
        return setTimeout((function() {
          return callback(null, n * 3);
        }), 10);
      };
      dev15 = function(n, callback) {
        return callback(null, n * 10);
      };
      add1mul3 = async.compose(dev15, mul3, add1);
      return add1mul3(4, function(err, result) {
        return expect(result).toBe(150);
      });
    });
    return it('Memoize - кеширование очень медленных функций', function() {
      var fn, slow_fn;
      slow_fn = function(name, callback) {
        var result;
        result = name;
        return setTimeout(function() {
          return callback(null, result);
        }, 10);
      };
      fn = async.memoize(slow_fn);
      fn("some name", function(err, result) {
        return console.info(result);
      });
      setTimeout(function() {
        return fn("some name2", function(err, result) {
          return console.info(result);
        });
      }, 11);
      return setTimeout(function() {
        return fn("some name3", function(err, result) {
          return console.info(result);
        });
      }, 15);
    });
  });

}).call(this);
