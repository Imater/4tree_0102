// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  describe("Service syncApi test", function() {
    var MainCtrl, db_tree, scope, syncApi, translate;
    beforeEach(module("4treeApp"));
    MainCtrl = void 0;
    scope = void 0;
    syncApi = void 0;
    translate = void 0;
    db_tree = void 0;
    beforeEach(inject(function($controller, $rootScope, $translate) {
      var $injector;
      scope = $rootScope.$new();
      MainCtrl = $controller("MainCtrl", {
        $scope: scope
      });
      $injector = angular.injector(["4treeApp"]);
      syncApi = $injector.get("syncApi");
      db_tree = $injector.get("db_tree");
      db_tree.constructor();
      return syncApi.constructor();
    }));
    it("Constructor function", function() {
      return expect(syncApi.sync_journal).toBeDefined();
    });
    it("jsEach function - рекурсивно обходит поля и выполняет функцию для каждого элемента", function() {
      var keys, sample_object, values;
      sample_object = {
        first: {
          second: {
            third: 'Hello, im third'
          }
        },
        first2: 'hi!',
        third: [1, 2, 3, 4, 5]
      };
      keys = [];
      values = [];
      syncApi.jsEach(sample_object, function(el, key) {
        keys.push(key);
        return values.push(el);
      });
      expect(keys.length).toBeGreaterThan(2.);
      expect(keys[0]).toBe('first.second.third');
      return expect(values.length).toBeGreaterThan(2.);
    });
    it("jsGetByPoints - находит или создает элемент при помощи пути заданного точками", function() {
      var answer, f5, sample_object;
      sample_object = {
        first: {
          second: {
            third: 'Hello, im third'
          }
        },
        first2: 'hi!',
        third: [1, 2, 3, 4, 5]
      };
      expect(syncApi.jsGetByPoints(sample_object, 'first.second.third')['third']).toBe('Hello, im third');
      expect(syncApi.jsGetByPoints(sample_object, 'third.0')['1']).toBe(2);
      f5 = syncApi.jsGetByPoints(sample_object, 'f1.f2.f3.f4.f5', 'create_if_not_finded');
      f5.f5 = 100;
      answer = syncApi.jsGetByPoints(sample_object, 'f1.f2.f3.f4.f5')['f5'];
      return expect(answer).toBe(100);
    });
    it("jsDryObjectBySyncJournal - выбирает из дерева только те элементы, которые есть в журнале синхронизаций", function() {
      console.info(syncApi.jsDryObjectBySyncJournal());
      return expect(true).toBe(true);
    });
    it("jsUnion - добавляет или заменяет время в списке изменившихся полей", function() {
      var new_value, old_value, union1;
      old_value = [
        {
          key: 'title',
          tm: new Date(2012, 11, 1)
        }
      ];
      new_value = [
        {
          key: 'title',
          tm: new Date(2013, 11, 1)
        }
      ];
      union1 = syncApi.jsUnion(old_value, new_value);
      expect(+union1[0].tm === +new_value[0].tm).toBeTruthy();
      new_value = [
        {
          key: 'note',
          tm: new Date(2013, 11, 1)
        }
      ];
      union1 = syncApi.jsUnion(old_value, new_value);
      expect(union1.length).toEqual(2);
      return expect(+union1[1].tm === +new_value[0].tm).toBeTruthy();
    });
    xit("getElementByKeysArray - Создание вложенного объекта", function() {
      var el;
      el = {};
      syncApi.getElementByKeysArray(el, ['first', 'second', 'third', 0, 'das']);
      console.info("ANSWER = ", JSON.stringify(el));
      syncApi.getElementByKeysArray(el, ['first', 'second', 'third', 0, 'das', 'sex']);
      return console.info("ANSWER = ", JSON.stringify(el));
    });
    it("getElementByKeysArray - Создание вложенного объекта", function() {
      var changed;
      db_tree.db_tree[2]._t = new Date();
      db_tree.db_tree[2].title._t = new Date();
      db_tree.db_tree[2].share[0].link._t = new Date();
      changed = syncApi.getChangedSinceTime(new Date());
      console.info(JSON.stringify(changed));
      return _.each(changed, function(one_el) {
        return console.info(JSON.stringify(syncApi.deepOmit(one_el, function(el, i) {
          var need;
          need = false;
          syncApi.myEach([el], function(obj, kk) {
            console.info("OBJ = ", obj, kk.lengths);
            if (obj._t) {
              return need = true;
            }
          });
          console.info(need);
          return false;
        })));
      });
    });
    return it("Создание нового ObjectId", function() {
      var myobjectid, tree;
      myobjectid = new ObjectId();
      console.info("Obj = ", myobjectid);
      console.info("string", myobjectid.toString());
      console.info("timestamp");
      tree = [
        {
          _id: myobjectid.toString(),
          title: 'hello'
        }
      ];
      return console.info(JSON.stringify(tree));
    });
  });

}).call(this);
