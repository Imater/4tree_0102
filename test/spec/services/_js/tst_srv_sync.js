// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  describe("Service syncApi test", function() {
    var MainCtrl, db_tree, have_child_changed, no_need, scope, syncApi, translate;
    beforeEach(module("4treeApp"));
    MainCtrl = void 0;
    scope = void 0;
    syncApi = void 0;
    translate = void 0;
    db_tree = void 0;
    beforeEach(inject(function($controller, $rootScope, $translate) {
      var $injector;
      scope = $rootScope.$new();
      MainCtrl = $controller("MainCtrl", {
        $scope: scope
      });
      $injector = angular.injector(["4treeApp"]);
      syncApi = $injector.get("syncApi");
      db_tree = $injector.get("db_tree");
      db_tree.constructor();
      return syncApi.constructor();
    }));
    it("Constructor function", function() {
      return expect(syncApi.sync_journal).toBeDefined();
    });
    it("jsEach function - рекурсивно обходит поля и выполняет функцию для каждого элемента", function() {
      var keys, sample_object, values;
      sample_object = {
        first: {
          second: {
            third: 'Hello, im third'
          }
        },
        first2: 'hi!',
        third: [1, 2, 3, 4, 5]
      };
      keys = [];
      values = [];
      syncApi.jsEach(sample_object, function(el, key) {
        keys.push(key);
        return values.push(el);
      });
      expect(keys.length).toBeGreaterThan(2.);
      expect(keys[0]).toBe('first.second.third');
      return expect(values.length).toBeGreaterThan(2.);
    });
    it("jsGetByPoints - находит или создает элемент при помощи пути заданного точками", function() {
      var answer, f5, sample_object;
      sample_object = {
        first: {
          second: {
            third: 'Hello, im third'
          }
        },
        first2: 'hi!',
        third: [1, 2, 3, 4, 5]
      };
      expect(syncApi.jsGetByPoints(sample_object, 'first.second.third')['third']).toBe('Hello, im third');
      expect(syncApi.jsGetByPoints(sample_object, 'third.0')['1']).toBe(2);
      f5 = syncApi.jsGetByPoints(sample_object, 'f1.f2.f3.f4.f5', 'create_if_not_finded');
      f5.f5 = 100;
      answer = syncApi.jsGetByPoints(sample_object, 'f1.f2.f3.f4.f5')['f5'];
      return expect(answer).toBe(100);
    });
    it("jsDryObjectBySyncJournal - выбирает из дерева только те элементы, которые есть в журнале синхронизаций", function() {
      return expect(true).toBe(true);
    });
    it("jsUnion - добавляет или заменяет время в списке изменившихся полей", function() {
      var new_value, old_value, union1;
      old_value = [
        {
          key: 'title',
          tm: new Date(2012, 11, 1)
        }
      ];
      new_value = [
        {
          key: 'title',
          tm: new Date(2013, 11, 1)
        }
      ];
      union1 = syncApi.jsUnion(old_value, new_value);
      expect(+union1[0].tm === +new_value[0].tm).toBeTruthy();
      new_value = [
        {
          key: 'note',
          tm: new Date(2013, 11, 1)
        }
      ];
      union1 = syncApi.jsUnion(old_value, new_value);
      expect(union1.length).toEqual(2);
      return expect(+union1[1].tm === +new_value[0].tm).toBeTruthy();
    });
    xit("getElementByKeysArray - Создание вложенного объекта", function() {
      var el;
      el = {};
      syncApi.getElementByKeysArray(el, ['first', 'second', 'third', 0, 'das']);
      return syncApi.getElementByKeysArray(el, ['first', 'second', 'third', 0, 'das', 'sex']);
    });
    have_child_changed = function(parent, now_time) {
      var answer;
      answer = false;
      _.each(parent, function(el, key) {
        if (key === '_t' && el > now_time) {
          return answer = true;
        } else if (_.isObject(el) || _.isArray(el)) {
          return answer = answer || have_child_changed(el, now_time);
        }
      });
      return answer;
    };
    no_need = function(now_time, el, key, parent, path) {
      var have_time;
      have_time = false;
      have_time = have_child_changed(parent[key], now_time);
      _.each(path, function(p) {
        if (p._t > now_time) {
          return have_time = true;
        }
      });
      return !have_time;
    };
    return it("getElementByKeysArray - Создание вложенного объекта", function() {
      var marked, now_time, obj_new, obj_old, sync_time;
      obj_old = {
        id: 1,
        title: {
          v: 'hello',
          _t: ""
        },
        tags: {
          v: ['label', 'tags', 'new_tag', 'hi']
        },
        objects: {
          v: [
            {
              0: 'first',
              1: 'second',
              3: 'thirs1'
            }
          ]
        },
        one: {
          two: {
            three: {
              v: 2,
              _t: ""
            }
          }
        },
        lexus: {
          v: '1'
        },
        comments: [
          {
            v: 'sex'
          }, {
            v: 'sex'
          }
        ],
        texts: [
          {
            v: 'fdka'
          }
        ]
      };
      obj_new = {
        id: 1,
        title: {
          v: 'hello',
          _t: ""
        },
        tags: {
          v: ['label', 'tags', 'new_tag', 'hi']
        },
        objects: {
          v: [
            {
              0: 'first',
              1: 'second',
              3: 'thirs1'
            }
          ]
        },
        one: {
          two: {
            three: {
              v: 2,
              _t: ""
            }
          }
        },
        lexus: {
          v: '1'
        },
        texts: {
          v: [
            {
              v: 'fdka'
            }, {
              v: 'fdka2'
            }
          ]
        }
      };
      sync_time = new Date(2015, 1, 15);
      marked = syncApi.asyncMarkChanges(obj_new, obj_old, sync_time);
      return now_time = new Date();
    });
  });

}).call(this);
