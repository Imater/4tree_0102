// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  describe("Service db_tree test", function() {
    var MainCtrl, db, generateView, getView, iterate, newView, refreshView, scope, srv_db_tree, translate, views_refresh;
    beforeEach(module("4treeApp"));
    MainCtrl = void 0;
    scope = void 0;
    srv_db_tree = void 0;
    translate = void 0;
    db = {
      'tree': {
        'rows': [
          {
            id: '1',
            title: 'first!!!',
            parent: '4'
          }, {
            id: '2',
            title: 'second',
            parent: '5'
          }, {
            id: '3',
            title: 'third',
            parent: '5'
          }, {
            id: '4',
            title: 'fours',
            parent: '4'
          }, {
            id: '5',
            title: 'fives',
            parent: '5'
          }, {
            id: '6',
            title: 'six',
            parent: '5'
          }
        ]
      },
      'tasks': {
        'rows': [
          {
            id: '1',
            title: 'first',
            parent: 5
          }, {
            id: 2,
            title: 'second',
            parent: 5
          }, {
            id: 3,
            title: 'third',
            parent: 5
          }, {
            id: 4,
            title: 'fours',
            parent: 5
          }, {
            id: 5,
            title: 'fives',
            parent: 4
          }, {
            id: 6,
            title: 'six',
            parent: 5
          }
        ]
      },
      'words': {
        rows: [
          {
            id: 1,
            text: "привет как дела у тебя мой друг"
          }, {
            id: 2,
            text: "привет как дела у тебя мой друг"
          }, {
            id: 3,
            text: "привет как дела у тебя наш чувак"
          }, {
            id: 4,
            text: "привет как дела у тебя мой друган"
          }
        ]
      }
    };
    views_refresh = function(db) {
      return _.each(db, function(db_base, db_name) {
        console.info('Analyse Base = ', db_name);
        return _.each(db_base.views, function(view, view_name) {
          var emit;
          emit = function(key, value) {
            if (!view.rows) {
              view.rows = [];
            }
            return view.rows.push({
              key: key,
              value: value
            });
          };
          console.info('view = ', view_name);
          _.each(db_base.rows, function(doc, key) {
            return view['map'](doc, emit);
          });
          if (view['reduce']) {
            view.result = view['reduce'](null, view.rows);
          }
          return view.rows = _.sortBy(view.rows, function(el) {
            return el.key;
          });
        });
      });
    };
    beforeEach(inject(function($controller, $rootScope, $translate) {
      var $injector;
      scope = $rootScope.$new();
      MainCtrl = $controller("MainCtrl", {
        $scope: scope
      });
      $injector = angular.injector(["4treeApp"]);
      srv_db_tree = $injector.get("db_tree");
      srv_db_tree.constructor();
      return translate = $translate;
    }));
    it("Get db_tree from service db_tree", function() {
      var db_tree;
      db_tree = srv_db_tree.getTree();
      expect(db_tree.length).toBeGreaterThan(1);
    });
    it("Test jsFind function", function() {
      expect(srv_db_tree.jsFind(1).title).toBe('Рабочие дела');
      return expect(srv_db_tree.jsFind(500000)).toBeUndefined();
    });
    it("Test jsGetPath function", function() {
      return expect(srv_db_tree.jsGetPath(11).length).toBeGreaterThan(0);
    });
    newView = function(db_name, view_name, mymap, myreduce) {
      var _ref, _ref1;
      if (!db[db_name]['views']) {
        db[db_name]['views'] = {};
      }
      if (!(db != null ? (_ref = db[db_name]) != null ? _ref['views'][view_name] : void 0 : void 0)) {
        return db != null ? (_ref1 = db[db_name]) != null ? _ref1['views'][view_name] = {
          rows: [],
          invalid: [],
          'map': mymap,
          'reduce': myreduce
        } : void 0 : void 0;
      }
    };
    iterate = 0;
    generateView = function(db_name, view_name, view_invalid) {
      var emit, memo, myrows, view;
      view = db[db_name]['views'][view_name];
      if ((view_invalid != null ? view_invalid[0] : void 0) === 0) {
        view_invalid = false;
      }
      if (view_invalid) {
        myrows = [
          _.find(db[db_name].rows, function(el) {
            return view_invalid.indexOf(el.id) !== -1;
          })
        ];
        view.rows = _.filter(view.rows, function(el) {
          return view_invalid.indexOf(el.id) === -1;
        });
      } else {
        myrows = db[db_name].rows;
      }
      memo = {};
      emit = function(key, value, doc) {
        if (!view.rows) {
          view.rows = [];
        }
        view.rows.push({
          id: doc.id,
          key: key,
          value: value
        });
        if (!view_invalid && view['reduce']) {
          return view['reduce'](memo, {
            key: key,
            value: value
          });
        }
      };
      _.each(myrows, function(doc, key) {
        var result;
        return result = view['map'](doc, emit);
      });
      if (view_invalid && view['reduce']) {
        _.each(view.rows, function(doc) {
          return view['reduce'](memo, {
            key: doc.key,
            value: doc.value
          });
        });
      }
      view.rows = _.sortBy(view.rows, function(el) {
        return el.key;
      });
      view.invalid = [];
      return view.result = memo;
    };
    getView = function(db_name, view_name) {
      var view, _ref;
      view = db != null ? (_ref = db[db_name]) != null ? _ref['views'][view_name] : void 0 : void 0;
      if (view.rows.length && view.invalid.length === 0) {
        return view;
      } else if (view.invalid.length > 0 && view.rows.length > 0) {
        generateView(db_name, view_name, view.invalid);
        return view;
      } else {
        generateView(db_name, view_name);
        return view;
      }
    };
    refreshView = function(db_name, ids) {
      return _.each(ids, function(id) {
        return _.each(db[db_name].views, function(view) {
          return view.invalid.push(id);
        });
      });
    };
    return it("new new MapReduce", function() {
      var found, mymap, myreduce, words;
      mymap = function(doc, emit) {
        var words;
        words = doc.text.split(" ");
        return _.each(words, function(word) {
          return emit(word, 1, doc);
        });
      };
      myreduce = function(memo, values) {
        var key;
        key = values.key;
        if (!memo[key]) {
          memo[key] = 0;
        }
        if (values.value) {
          return memo[key] += values.value;
        }
      };
      newView('words', 'by_word', mymap, myreduce);
      words = getView('words', 'by_word');
      console.info("Result = ", words.result);
      found = _.find(db.words.rows, function(el) {
        return el.id = 1;
      });
      found.text = "ЖОПА тебя дела";
      iterate = 0;
      refreshView('words', [0]);
      words = getView('words', 'by_word');
      console.info("Result = ", words.result);
      return expect(true).toBe(true);
    });
  });

  /*
  	newView('tree', 'by_day', map, reduce);
  	Создаёт схему для нового вида
  
  	getView('tree', 'by_day');
  	возвращает вид по плану:
  	1. Если вид пустой, генерирует его полностью
  	2. Если вид полный, но есть инвалидные данные, генерирует только их:
  		1. Пропускает невалидные данные через map
  		2. Результат пропускает через Reduce
  		3. Результат пропускает через ReReduce
  		4. Помечает данные валидными
  
  
  	refreshId('tree', _id);
  	инвалидирует _id в виде, чтобы обновить его при следующем запросе
  */


}).call(this);
