// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var syncApi, sync_journal_example;

  sync_journal_example = {
    '8': {
      _tm: new Date().getTime(),
      changes: [
        {
          'title': {
            _tm: new Date().getTime()
          }
        }
      ]
    }
  };

  syncApi = {
    sync_journal: {},
    gen: 1,
    jsGetGen: function() {
      return this.gen++;
    },
    jsFindChangesForSync: function(new_value, old_value) {
      var mythis;
      mythis = this;
      this.jsDeepEach(new_value, function(el, key) {
        var old_el;
        old_el = mythis.jsGetByKeys(old_value, key)[key[key.length - 1]];
        if (!_.isEqual(el, old_el)) {
          console.info(key, el, "?=", old_el, new_value._id);
          return mythis.jsAddToSyncJournal(new_value._id, key);
        }
      });
      return this.sync_journal;
    },
    jsAddToSyncJournal: function(_id, key) {
      var gen, json_key, now, to_push;
      now = new Date().getTime();
      gen = this.jsGetGen();
      console.info("id = ", _id);
      if (!this.sync_journal[_id]) {
        this.sync_journal[_id] = {
          _tm: now,
          _gen: gen,
          changes: {}
        };
      } else {
        this.sync_journal[_id]._tm = now;
        this.sync_journal[_id]._gen = gen;
      }
      json_key = key.join(".");
      to_push = {
        _tm: now,
        _gen: gen
      };
      if (!this.sync_journal[_id].changes[json_key]) {
        this.sync_journal[_id].changes[json_key] = {};
      }
      return this.sync_journal[_id].changes[json_key] = to_push;
    },
    jsDeepEach: function(elements, fn, name) {
      var mythis;
      if (name == null) {
        name = [];
      }
      mythis = this;
      return _.each(elements, function(el, key) {
        var name1, _ref;
        if (!_.isObject(el) || !_.isArray(el)) {
          name1 = name.slice(0);
          name1.push(key);
          if (!((_ref = key[0]) === '$' || _ref === '+')) {
            return fn.call(this, el, name1);
          }
        } else {
          name1 = name.slice(0);
          name1.push(key);
          return mythis.jsDeepEach(el, fn, name1);
        }
      });
    },
    jsGetByKeys: function(obj, keys, create_if_not_finded) {
      var prev_obj;
      prev_obj = obj;
      _.each(keys, function(point, i) {
        prev_obj = obj;
        if (obj[point]) {
          return obj = obj[point];
        }
      });
      return prev_obj;
    }
  };

  describe("Service syncApi test", function() {
    var now;
    now = new Date(2014, 2, 23, 17, 31, 1).getTime();
    return it("Find changes 1", function() {
      var new_value, new_value2, old_value, sync_journal_element;
      new_value = {
        _id: "1",
        title: "hi!",
        tags: ['tag1', 'tag3'],
        first_level: {
          second: {
            third: "i'm third"
          }
        },
        parent: 8
      };
      new_value2 = {
        _id: "1",
        title: "hi33",
        tags: ['tag1', 'tag3'],
        first_level: {
          second: {
            third: "i'm third"
          }
        },
        parent: 8
      };
      old_value = {
        _id: "1",
        title: "hello",
        tags: ['tag1', 'tag2'],
        first_level: {
          second: {
            third: "i'm third"
          }
        },
        parent: 8
      };
      sync_journal_element = {
        _id: "1",
        _tm: now,
        changes: [
          {
            'title': {
              _tm: now
            }
          }
        ]
      };
      console.info(JSON.stringify(syncApi.jsFindChangesForSync(new_value, old_value)));
      console.info(JSON.stringify(syncApi.jsFindChangesForSync(new_value2, new_value), null, "  "));
      return expect(true).toBe(true);
    });
  });

}).call(this);
