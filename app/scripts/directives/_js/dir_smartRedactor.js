// Generated by CoffeeScript 1.6.3
/*
usage: <textarea ng-model="content" redactor></textarea>

additional options:
redactor: hash (pass in a redactor options hash)
*/


(function() {
  angular.module("angular-redactor", []).directive("smartRedactor", [
    "$timeout", "$rootScope", "db_tree", function($timeout, $rootScope, db_tree) {
      return {
        restrict: "A",
        require: "ngModel",
        link: function(scope, element, attrs, ngModel) {
          var $_element, additionalOptions, editor, options, resizecontent, updateModel;
          updateModel = function(value) {
            return scope.$apply(function() {
              var text_id;
              text_id = ngModel.$viewValue;
              if (text_id) {
                return db_tree.setText(text_id, value);
              }
            });
          };
          resizecontent = _.debounce(function() {
            return $(element).parents('.content').scroll();
          }, 100);
          $(window).resize(function() {
            return resizecontent();
          });
          options = {
            boldTag: 'b',
            changeCallback: _.debounce(function(value) {
              return updateModel(value);
            }, 100),
            imageUpload: '/api/v1/uploadImage/?id=' + $rootScope.$$childTail.set.user_id,
            clipboardUploadUrl: '/api/v1/uploadImage/?id=' + $rootScope.$$childTail.set.user_id
          };
          additionalOptions = (attrs.smartRedactor ? scope.$eval(attrs.smartRedactor) : {});
          editor = void 0;
          $_element = angular.element(element);
          angular.extend(options, additionalOptions);
          $timeout(function() {
            editor = $_element.redactor(options);
            return ngModel.$render();
          }, 10);
          $rootScope.$on('refresh_editor', _.debounce(function(value) {
            return db_tree.getText(ngModel.$viewValue).then(function(text_element) {
              return $_element.redactor("set", (text_element != null ? text_element.text : void 0) || "", false);
            });
          }, 1));
          return ngModel.$render = function() {
            if (angular.isDefined(editor)) {
              return db_tree.getText(ngModel.$viewValue).then(function(text_element) {
                return $_element.redactor("set", (text_element != null ? text_element.text : void 0) || "", false);
              });
            }
          };
        }
      };
    }
  ]);

}).call(this);
