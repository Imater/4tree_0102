// Generated by CoffeeScript 1.6.3
(function() {
  var draw_functions_queue, redraw_all_children, suspend_timer_off, suspend_timer_on;

  suspend_timer_off = _.debounce(function() {
    _.each(draw_functions_queue, function(fn, i) {
      if (fn) {
        fn.apply();
      }
      return delete draw_functions_queue[i];
    });
    return false;
  }, 0);

  suspend_timer_on = _.debounce(function() {
    return false;
  }, 120);

  redraw_all_children = _.debounce(function(element) {
    return $(element).parents("li").each(function(i, el) {
      var found;
      found = $(el).find("._jsPlumb_endpoint_anchor_:first");
      console.info("repaint = ", found[0].id);
      return jsPlumb.repaint(found[0].id);
    });
  }, 2);

  draw_functions_queue = {};

  angular.module("4treeApp").directive("plumbConnect", function($timeout) {
    return {
      replace: true,
      require: "?ngModel",
      link: function(scope, element, attrs, ngModel) {
        var parent_element;
        parent_element = $(element).parents("li:first").parents("li:first").find('.col3');
        suspend_timer_off();
        jsPlumb.Defaults.Container = $(".mindmap .content");
        jsPlumb.Defaults.DragOptions = {
          cursor: 'pointer',
          zIndex: 2000
        };
        jsPlumb.Defaults.PaintStyle = {
          lineWidth: 1,
          strokeStyle: "#888"
        };
        jsPlumb.Defaults.Connector = [
          "Bezier", {
            curviness: 30
          }
        ];
        jsPlumb.Defaults.Endpoint = [
          "Blank", {
            radius: 5
          }
        ];
        jsPlumb.Defaults.EndpointStyle = {
          fillStyle: "#567567"
        };
        scope.$watch('tree.title', function(new_value, old_value) {
          if (old_value !== new_value) {
            console.info('title_changed');
            return redraw_all_children(element);
          }
        });
        if (parent_element.length && true) {
          draw_functions_queue[attrs.id] = function() {
            jsPlumb.Defaults.Container = parent_element.parents("li:first");
            jsPlumb.connect({
              source: parent_element,
              target: element,
              paintStyle: {
                lineWidth: 1,
                strokeStyle: "#888"
              },
              anchors: [[1, 1, 1, 0, -1, -1], [0, 1, -1, 0, 1, -1]]
            });
            redraw_all_children(element);
            return suspend_timer_on();
          };
        }
        element.on('$destroy', function() {
          suspend_timer_off();
          jsPlumb.detachAllConnections(element);
          redraw_all_children($(element).parents("li:first").parents("li:first"));
          return suspend_timer_on();
        });
      }
    };
  });

  if (false) {
    jsPlumb.makeTarget(element, {
      anchor: "Continuous",
      maxConnections: 2
    });
    jsPlumb.draggable(element, {
      containment: "parent"
    });
    element.bind("dblclick", function(e) {
      jsPlumb.detachAllConnections($(this));
      $(this).remove();
      e.stopPropagation();
      scope.$parent.removeState(attrs.identifier);
      scope.$parent.$digest();
    });
  }

}).call(this);
