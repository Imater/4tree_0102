// Generated by CoffeeScript 1.6.3
(function() {
  angular.module("4treeApp").service('cryptApi', [
    '$translate', 'db_tree', '$rootScope', function($translate, db_tree, $rootScope) {
      return {
        methods: {
          0: 'AES',
          1: 'DES',
          2: 'TripleDES',
          3: 'Rabbit',
          4: 'RC4Drop'
        },
        pass_salt: 'salt',
        password: "990990",
        pass: "pass1",
        reminder: 'ФИО',
        constructor: function() {
          console.time('start');
          return console.timeEnd('start');
        },
        encrypt: function(text, type) {
          var answer, encrypt, encrypt_method, salt;
          salt = this.sha3("_" + Math.random() * 100000000).substr(0, 5);
          encrypt_method = this.methods[type] ? this.methods[type] : 'AES';
          console.time('encrypt start ' + encrypt_method);
          if (CryptoJS[encrypt_method]) {
            encrypt = CryptoJS[encrypt_method].encrypt(text, this.pass + salt).toString();
          } else {
            encrypt = text;
          }
          answer = {
            memo: this.reminder,
            data: encrypt,
            method: encrypt_method,
            salt: salt
          };
          console.timeEnd('encrypt start ' + encrypt_method);
          return JSON.stringify(answer);
        },
        decrypt: function(text) {
          var answer, e, errors;
          errors = null;
          try {
            text = JSON.parse(text);
          } catch (_error) {
            e = _error;
            errors = $translate('ENCRYPT.JSON_ERROR');
          }
          if (CryptoJS[text.method]) {
            answer = CryptoJS[text.method].decrypt(text.data, this.pass + text.salt);
            if (answer.sigBytes <= 0) {
              errors = $translate('ENCRYPT.PASS_ERROR');
            }
            answer = answer.toString(CryptoJS.enc.Utf8);
          }
          return {
            text: answer,
            err: errors
          };
        },
        sha3: function(value) {
          return CryptoJS.SHA3(value, {
            outputLength: 64
          }).toString();
        }
      };
    }
  ]);

}).call(this);
