// Generated by CoffeeScript 1.6.3
(function() {
  angular.module("4treeApp").service('syncApi', [
    '$translate', 'db_tree', '$q', '$http', 'oAuth2Api', 'diffApi', '$rootScope', '$timeout', '$socket', function($translate, db_tree, $q, $http, oAuth2Api, diffApi, $rootScope, $timeout, $socket) {
      return {
        autosync_on: true,
        sync_journal: {},
        last_sync_time: "не проводилась",
        gen: 1,
        jsGetGen: function() {
          return this.gen++;
        },
        jsFindChangesForSync: function(new_value, old_value) {
          var mythis;
          mythis = this;
          this.jsDeepEach(new_value, function(el, key) {
            var old_el;
            old_el = mythis.jsGetByKeys(old_value, key)[key[key.length - 1]];
            if (!_.isEqual(el, old_el) && key[0] && key[0][0] !== "_") {
              mythis.jsAddToSyncJournal(new_value._id, key);
              return console.info(new_value._id + " changed " + key.join("."));
            }
          });
          return this.sync_journal;
        },
        jsAddToSyncJournal: function(_id, key) {
          var gen, json_key, now, to_push;
          now = new Date().getTime();
          gen = this.jsGetGen();
          if (!this.sync_journal[_id]) {
            this.sync_journal[_id] = {
              _tm: now,
              _gen: gen,
              changes: {}
            };
          } else {
            this.sync_journal[_id]._tm = now;
            this.sync_journal[_id]._gen = gen;
          }
          json_key = key.join(".");
          to_push = {
            _tm: now,
            _gen: gen
          };
          if (!this.sync_journal[_id].changes[json_key]) {
            this.sync_journal[_id].changes[json_key] = {};
          }
          this.sync_journal[_id].changes[json_key] = to_push;
          return this.jsStartSyncInWhile();
        },
        jsDeepEach: function(elements, fn, name) {
          var mythis;
          if (name == null) {
            name = [];
          }
          mythis = this;
          return _.each(elements, function(el, key) {
            var name1, _ref;
            if (!_.isObject(el) || !_.isArray(el)) {
              name1 = name.slice(0);
              name1.push(key);
              if (!((_ref = key[0]) === '$' || _ref === '+')) {
                return fn.call(this, el, name1);
              }
            } else {
              name1 = name.slice(0);
              name1.push(key);
              return mythis.jsDeepEach(el, fn, name1);
            }
          });
        },
        jsGetByKeys: function(obj, keys, create_if_not_finded) {
          var prev_obj;
          prev_obj = obj;
          _.each(keys, function(point, i) {
            prev_obj = obj;
            if (obj[point]) {
              return obj = obj[point];
            }
          });
          return prev_obj;
        },
        'jsStartSyncInWhile': _.debounce(function() {
          console.info('wait 5 sec...');
          if (false && this.autosync_on && Object.keys(this.diff_journal).length) {
            return this.jsStartSync();
          }
        }, 1000),
        jsHideSyncIndicator: _.debounce(function() {
          return $(".sync_indicator").removeClass('active');
        }, 1000),
        jsStartSync: function() {
          var mythis, to_send;
          db_tree.syncDiff();
          return true;
          this.syncToServer().then(function() {
            return $rootScope.$emit('sync_ended');
          });
          return true;
          $(".sync_indicator").addClass('active');
          mythis = this;
          to_send = {
            notes: [],
            sync_journal: this.sync_journal
          };
          _.each(this.sync_journal, function(sync_one, key) {
            var found;
            found = _.find(db_tree._db.tree, function(el) {
              return el._id === key;
            });
            console.info(sync_one, key, found);
            if (found) {
              return to_send.notes.push(found);
            }
          });
          return this.jsPostSync(to_send).then(function() {
            var now;
            mythis.sync_journal = {};
            now = new moment();
            mythis.last_sync_time = now.format("HH:mm:ss");
            return mythis.jsHideSyncIndicator();
          });
        },
        jsPostSync: function(sync_data_to_send) {
          var dfd;
          dfd = $q.defer();
          console.info(oAuth2Api);
          oAuth2Api.jsGetToken().then(function(token) {
            return $http({
              url: '/api/v1/sync',
              method: "POST",
              isArray: true,
              params: {
                access_token: token
              },
              data: {
                sync_data_to_send: sync_data_to_send
              }
            }).then(function(result) {
              console.info("SYNC_RESULT = ", result);
              return dfd.resolve(result.data);
            });
          });
          return dfd.promise;
        },
        jsSyncJournalCount: function() {
          return Object.keys(this.sync_journal).length;
        },
        diff_journal: {},
        sync_now: false,
        constructor: function() {
          var mythis;
          mythis = this;
          return $rootScope.$on('jsFindAndSaveDiff', function(event, db_name, new_value, old_value) {
            var diffs;
            console.info('watch', mythis.sync_now);
            if (!old_value || !new_value || mythis.sync_now) {
              return;
            }
            diffs = diffApi.diff(old_value, new_value, new Date().getTime());
            _.each(diffs, function(diff) {
              var key;
              if (diff.key[0][0] !== '_' && diff.key[diff.key.length - 1][0] !== '$' && diff.key[diff.key.length - 1][0] !== '_' && diff.key[0] !== '_tm') {
                key = diff.type + ':' + diff.key.join('.');
                if (!mythis.diff_journal[db_name]) {
                  mythis.diff_journal[db_name] = {};
                }
                if (!mythis.diff_journal[db_name][old_value._id]) {
                  mythis.diff_journal[db_name][old_value._id] = {};
                }
                mythis.diff_journal[db_name][old_value._id][key] = diff;
              }
            });
            if (diffs.length) {
              db_tree.refreshView(db_name, [old_value._id], new_value, old_value);
              mythis.jsStartSyncInWhile();
            }
            return db_tree.jsSaveElementToLocal(db_name, new_value).then(function() {
              return console.info('saved_local');
            });
          });
        },
        getLastSyncTime: function() {
          var max_element;
          max_element = _.max(db_tree._db.tree, function(el) {
            if (el._tm) {
              return new Date(el._tm);
            } else {
              return 0;
            }
          });
          return max_element._tm;
        },
        dfd_sync: $q.defer(),
        syncThrough: function(transport, data) {
          var mythis;
          mythis = this;
          mythis.dfd_sync = $q.defer();
          diffApi.logJson('sending data through [' + transport + ']', data);
          if (transport === 'http') {
            oAuth2Api.jsGetToken().then(function(token) {
              return $http({
                url: '/api/v1/sync_db',
                method: "POST",
                isArray: true,
                params: {
                  access_token: token
                },
                data: data
              }).then(function(result) {
                return mythis.jsUpdateDb(result.data).then(function() {
                  return mythis.dfd_sync.resolve(result.data);
                });
              });
            });
          }
          if (transport === 'websocket') {
            $socket.emit('sync_data', data, function(answer) {
              return console.info('ANSWER = ', answer);
            });
          }
          return mythis.dfd_sync.promise;
        },
        syncToServer: function() {
          var dfd, mythis, new_elements;
          dfd = $q.defer();
          mythis = this;
          new_elements = {};
          async.each(db_tree.store_schema, function(table_schema, callback) {
            var db_name, found_elements;
            db_name = table_schema.name;
            found_elements = _.filter(db_tree._db[db_name], function(el, key) {
              return el._new === true;
            });
            _.each(found_elements, function(found) {
              if (!new_elements[db_name]) {
                new_elements[db_name] = {};
              }
              return new_elements[db_name][found._id] = found;
            });
            return callback();
          }, function() {
            var data;
            console.timeEnd('load_local');
            data = {
              diff_journal: mythis.diff_journal,
              last_sync_time: mythis.getLastSyncTime(),
              user_instance: $rootScope.$$childTail.set.user_instance,
              user_id: $rootScope.$$childTail.set.user_id,
              new_elements: new_elements
            };
            if ($socket.is_online()) {
              return mythis.syncThrough('websocket', data).then(function() {
                console.info('sync_socket_ended');
                return dfd.resolve();
              });
            } else {
              return mythis.syncThrough('http', data).then(function() {
                console.info('sync_http_ended');
                return dfd.resolve();
              });
            }
          });
          return dfd.promise;
        },
        jsUpdateDb: function(data) {
          var dfd, dfdArray, mythis;
          dfd = $.Deferred();
          dfdArray = [];
          mythis = this;
          _.each(data, function(db_table, db_name) {
            return dfdArray.push(mythis.jsUpdateDbOne(db_table, db_name));
          });
          $.when.apply(null, dfdArray).then(function() {
            return dfd.resolve();
          });
          return dfd.promise();
        },
        jsUpdateDbOne: function(db_table, db_name) {
          var copyObject, dfd, i_need_refresh, mythis, new_data, sync_confirm_id;
          console.info("ONE = ", db_table);
          new_data = db_table.new_data;
          sync_confirm_id = db_table.sync_confirm_id;
          console.info('confirm = ', sync_confirm_id, 'new_data = ', new_data);
          dfd = $.Deferred();
          mythis = this;
          mythis.sync_now = true;
          copyObject = function(source, obj) {
            var key, newObj;
            newObj = source;
            for (key in obj) {
              newObj[key] = obj[key];
            }
            return newObj;
          };
          i_need_refresh = false;
          _.each(new_data, function(new_data_element) {
            var found;
            found = _.find(db_tree._db[db_name], function(el, key) {
              return el._id === new_data_element._id;
            });
            if (found) {
              copyObject(found, new_data_element);
              i_need_refresh = true;
              console.info('new = ', found);
            } else {
              console.info('need_to_create!', new_data_element);
              db_tree._db[db_name].push(new_data_element);
              i_need_refresh = true;
            }
            return true;
          });
          _.each(sync_confirm_id, function(confirm_element) {
            var found, _ref, _ref1;
            found = _.find(db_tree._db[db_name], function(el, key) {
              return el._id === confirm_element._id;
            });
            if (found) {
              console.info('confirm_times', found._tm, confirm_element._tm, mythis.sync_now);
              i_need_refresh = true;
              found._tm = confirm_element._tm;
              found._new = false;
              if ((_ref = mythis.diff_journal) != null ? (_ref1 = _ref[db_name]) != null ? _ref1[confirm_element._id] : void 0 : void 0) {
                return delete mythis.diff_journal[db_name][confirm_element._id];
              }
            }
          });
          if (i_need_refresh) {
            db_tree.refreshParentsIndex();
          }
          dfd.resolve();
          $timeout(function() {
            return mythis.sync_now = false;
          });
          return dfd.promise();
        }
      };
    }
  ]);

}).call(this);
