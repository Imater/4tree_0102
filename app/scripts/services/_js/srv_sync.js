// Generated by CoffeeScript 1.6.3
(function() {
  angular.module("4treeApp").service('syncApi', [
    '$translate', 'db_tree', '$q', '$http', function($translate, db_tree, $q, $http) {
      return {
        sync_journal: {},
        gen: 1,
        jsGetGen: function() {
          return this.gen++;
        },
        jsFindChangesForSync: function(new_value, old_value) {
          var mythis;
          mythis = this;
          this.jsDeepEach(new_value, function(el, key) {
            var old_el;
            old_el = mythis.jsGetByKeys(old_value, key)[key[key.length - 1]];
            if (!_.isEqual(el, old_el)) {
              mythis.jsAddToSyncJournal(new_value._id, key);
              return console.info(new_value._id + " changed " + key.join("."));
            }
          });
          return this.sync_journal;
        },
        jsAddToSyncJournal: function(_id, key) {
          var gen, json_key, now, to_push;
          now = new Date().getTime();
          gen = this.jsGetGen();
          if (!this.sync_journal[_id]) {
            this.sync_journal[_id] = {
              _tm: now,
              _gen: gen,
              changes: {}
            };
          } else {
            this.sync_journal[_id]._tm = now;
            this.sync_journal[_id]._gen = gen;
          }
          json_key = key.join(".");
          to_push = {
            _tm: now,
            _gen: gen
          };
          if (!this.sync_journal[_id].changes[json_key]) {
            this.sync_journal[_id].changes[json_key] = {};
          }
          return this.sync_journal[_id].changes[json_key] = to_push;
        },
        jsDeepEach: function(elements, fn, name) {
          var mythis;
          if (name == null) {
            name = [];
          }
          mythis = this;
          return _.each(elements, function(el, key) {
            var name1, _ref;
            if (!_.isObject(el) || !_.isArray(el)) {
              name1 = name.slice(0);
              name1.push(key);
              if (!((_ref = key[0]) === '$' || _ref === '+')) {
                return fn.call(this, el, name1);
              }
            } else {
              name1 = name.slice(0);
              name1.push(key);
              return mythis.jsDeepEach(el, fn, name1);
            }
          });
        },
        jsGetByKeys: function(obj, keys, create_if_not_finded) {
          var prev_obj;
          prev_obj = obj;
          _.each(keys, function(point, i) {
            prev_obj = obj;
            if (obj[point]) {
              return obj = obj[point];
            }
          });
          return prev_obj;
        },
        jsStartSync: function() {
          var to_send;
          to_send = {
            notes: [],
            sync_journal: this.sync_journal
          };
          _.each(this.sync_journal, function(sync_one, key) {
            var found;
            found = _.find(db_tree._db.tree, function(el) {
              return el._id === key;
            });
            console.info(sync_one, key, found);
            if (found) {
              return to_send.notes.push(found);
            }
          });
          return this.jsPostSync(to_send);
        },
        oAuth2: {
          jsGetToken: function() {
            var dfd;
            dfd = $q.defer();
            $http({
              url: 'oauth/token',
              method: "POST",
              isArray: true,
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
              },
              params: {},
              data: $.param({
                grant_type: 'password',
                client_id: '4tree_client',
                client_secret: '4tree_secret',
                username: 'imater',
                password: '990990'
              })
            }).then(function(result) {
              return dfd.resolve(result.data);
            });
            dfd.resolve('there_will_be_token');
            return dfd.promise;
          }
        },
        jsPostSync: function(sync_data_to_send) {
          var dfd;
          dfd = $q.defer();
          this.oAuth2.jsGetToken().then(function(token) {
            return $http({
              url: '/api/v1/sync',
              method: "POST",
              isArray: true,
              params: {
                token: token
              },
              data: {
                sync_data_to_send: sync_data_to_send
              }
            }).then(function(result) {
              return dfd.resolve(result.data);
            });
          });
          return dfd.promise;
        }
      };
    }
  ]);

}).call(this);
