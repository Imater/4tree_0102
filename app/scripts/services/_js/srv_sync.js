// Generated by CoffeeScript 1.6.3
(function() {
  angular.module("4treeApp").service('syncApi', [
    '$translate', 'db_tree', '$q', '$http', 'oAuth2Api', 'diffApi', '$rootScope', function($translate, db_tree, $q, $http, oAuth2Api, diffApi, $rootScope) {
      return {
        autosync_on: false,
        sync_journal: {},
        last_sync_time: "не проводилась",
        gen: 1,
        jsGetGen: function() {
          return this.gen++;
        },
        jsFindChangesForSync: function(new_value, old_value) {
          var mythis;
          mythis = this;
          this.jsDeepEach(new_value, function(el, key) {
            var old_el;
            old_el = mythis.jsGetByKeys(old_value, key)[key[key.length - 1]];
            if (!_.isEqual(el, old_el) && key[0] && key[0][0] !== "_") {
              mythis.jsAddToSyncJournal(new_value._id, key);
              return console.info(new_value._id + " changed " + key.join("."));
            }
          });
          return this.sync_journal;
        },
        jsAddToSyncJournal: function(_id, key) {
          var gen, json_key, now, to_push;
          now = new Date().getTime();
          gen = this.jsGetGen();
          if (!this.sync_journal[_id]) {
            this.sync_journal[_id] = {
              _tm: now,
              _gen: gen,
              changes: {}
            };
          } else {
            this.sync_journal[_id]._tm = now;
            this.sync_journal[_id]._gen = gen;
          }
          json_key = key.join(".");
          to_push = {
            _tm: now,
            _gen: gen
          };
          if (!this.sync_journal[_id].changes[json_key]) {
            this.sync_journal[_id].changes[json_key] = {};
          }
          this.sync_journal[_id].changes[json_key] = to_push;
          return this.jsStartSyncInWhile();
        },
        jsDeepEach: function(elements, fn, name) {
          var mythis;
          if (name == null) {
            name = [];
          }
          mythis = this;
          return _.each(elements, function(el, key) {
            var name1, _ref;
            if (!_.isObject(el) || !_.isArray(el)) {
              name1 = name.slice(0);
              name1.push(key);
              if (!((_ref = key[0]) === '$' || _ref === '+')) {
                return fn.call(this, el, name1);
              }
            } else {
              name1 = name.slice(0);
              name1.push(key);
              return mythis.jsDeepEach(el, fn, name1);
            }
          });
        },
        jsGetByKeys: function(obj, keys, create_if_not_finded) {
          var prev_obj;
          prev_obj = obj;
          _.each(keys, function(point, i) {
            prev_obj = obj;
            if (obj[point]) {
              return obj = obj[point];
            }
          });
          return prev_obj;
        },
        'jsStartSyncInWhile': _.debounce(function() {
          if (this.autosync_on) {
            return this.jsStartSync();
          }
        }, 5000),
        jsHideSyncIndicator: _.debounce(function() {
          return $(".sync_indicator").removeClass('active');
        }, 1000),
        jsStartSync: function() {
          var mythis, to_send;
          $(".sync_indicator").addClass('active');
          mythis = this;
          to_send = {
            notes: [],
            sync_journal: this.sync_journal
          };
          _.each(this.sync_journal, function(sync_one, key) {
            var found;
            found = _.find(db_tree._db.tree, function(el) {
              return el._id === key;
            });
            console.info(sync_one, key, found);
            if (found) {
              return to_send.notes.push(found);
            }
          });
          return this.jsPostSync(to_send).then(function() {
            var now;
            mythis.sync_journal = {};
            now = new moment();
            mythis.last_sync_time = now.format("HH:mm:ss");
            return mythis.jsHideSyncIndicator();
          });
        },
        jsPostSync: function(sync_data_to_send) {
          var dfd;
          dfd = $q.defer();
          console.info(oAuth2Api);
          oAuth2Api.jsGetToken().then(function(token) {
            return $http({
              url: '/api/v1/sync',
              method: "POST",
              isArray: true,
              params: {
                access_token: token
              },
              data: {
                sync_data_to_send: sync_data_to_send
              }
            }).then(function(result) {
              console.info("SYNC_RESULT = ", result);
              return dfd.resolve(result.data);
            });
          });
          return dfd.promise;
        },
        jsSyncJournalCount: function() {
          return Object.keys(this.sync_journal).length;
        },
        diff_journal: {},
        constructor: function() {
          var mythis;
          mythis = this;
          return $rootScope.$on('jsFindAndSaveDiff', function(event, db_name, new_value, old_value) {
            var diffs;
            if (!old_value || !new_value) {
              return;
            }
            diffs = diffApi.diff(old_value, new_value, new Date().getTime());
            _.each(diffs, function(diff) {
              var key;
              if (diff.key[0][0] !== '_' && diff.key[diff.key.length - 1][0] !== '$') {
                key = diff.type + ':' + diff.key.join('.');
                if (!mythis.diff_journal[db_name]) {
                  mythis.diff_journal[db_name] = {};
                }
                if (!mythis.diff_journal[db_name][old_value._id]) {
                  mythis.diff_journal[db_name][old_value._id] = {};
                }
                mythis.diff_journal[db_name][old_value._id][key] = diff;
              }
            });
            return db_tree.refreshView(db_name, [old_value._id], new_value, old_value);
          });
        },
        syncToServer: function() {
          var data, dfd, mythis;
          dfd = $q.defer();
          mythis = this;
          data = {
            diff_journal: this.diff_journal
          };
          diffApi.logJson('sending data', data);
          oAuth2Api.jsGetToken().then(function(token) {
            return $http({
              url: '/api/v1/sync_db',
              method: "POST",
              isArray: true,
              params: {
                access_token: token
              },
              data: data
            }).then(function(result) {
              console.info("SYNC_RESULT = ", result);
              mythis.diff_journal = {};
              return dfd.resolve(result.data);
            });
          });
          return dfd.promise;
        }
      };
    }
  ]);

}).call(this);
