// Generated by CoffeeScript 1.6.3
(function() {
  angular.module("4treeApp").factory('datasource', [
    '$timeout', function($timeout) {
      return {
        get: function(index, count, success) {
          var i, result, _i, _ref;
          result = [];
          for (i = _i = index, _ref = index + count - 1; index <= _ref ? _i <= _ref : _i >= _ref; i = index <= _ref ? ++_i : --_i) {
            result.push("{i}");
          }
          return success(result);
        }
      };
    }
  ]);

  angular.module("4treeApp").service('db_tree', [
    '$translate', '$http', '$q', '$rootScope', 'oAuth2Api', '$timeout', function($translate, $http, $q, $rootScope, oAuth2Api, $timeout) {
      return {
        _db: {},
        _cache: {},
        salt: function() {
          return 'Salt is a mineral substance composed';
        },
        pepper: function() {
          return ' primarily of sodium chloride (NaCl)';
        },
        constructor: function() {
          var mythis;
          mythis = this;
          $rootScope.$on('my-sorted', function(event, data) {
            return $timeout(function() {
              console.info("SORTED", data);
              mythis.jsFind(data.from_id).parent_id = data.to_id;
              mythis.refreshParentsIndex();
              return $timeout(function() {
                return $("ul > .tree_tmpl").remove();
              });
            });
          });
          $rootScope.$on('my-created', function(event, data) {
            return console.info("CREATED", data);
          });
          this.loadTasks();
          if (!this._cache) {
            this._cache = {};
          }
          if (!this._db.tree) {
            this._db.tree = [];
            return this.refreshParentsIndex();
          }
        },
        clearCache: function() {
          return _.each(this, function(fn) {
            if (fn) {
              return fn.cache = {};
            }
          });
        },
        getTreeFromNet: function() {
          var dfd, mythis;
          dfd = $q.defer();
          mythis = this;
          return oAuth2Api.jsGetToken().then(function(access_token) {
            return $http({
              url: '/api/v2/tree',
              method: "GET",
              params: {
                user_id: '5330ff92898a2b63c2f7095f',
                access_token: access_token
              }
            }).then(function(result) {
              mythis._db.tree = result.data;
              mythis.refreshParentsIndex();
              $rootScope.$$childTail.db.main_node = [];
              $rootScope.$broadcast('tree_loaded');
              mythis.clearCache();
              return dfd.resolve(result.data);
            });
          });
        },
        refreshParentsIndex: function(parent_id) {
          var focus, found, mymap, mymap_calendar, myreduce_calendar, mythis;
          focus = $rootScope.$$childTail.set.focus;
          mythis = this;
          if (!parent_id) {
            mythis.db_parents = {};
          } else {
            mythis.db_parents['n' + parent_id] = [];
          }
          found = _.find(this._db.tree, function(el) {
            return el.folder === 'main';
          });
          if (found) {
            if ($rootScope.$$childTail.set.main_parent_id.length === 0) {
              $rootScope.$$childTail.set.main_parent_id[0] = found._id;
              $rootScope.$$childTail.set.main_parent_id[1] = found._id;
              $rootScope.$$childTail.set.main_parent_id[2] = found._id;
              $rootScope.$$childTail.set.main_parent_id[3] = found._id;
              console.info(2);
            }
            $rootScope.$$childTail.set.top_parent_id = found._id;
          }
          _.each(this._db.tree, function(el) {
            var cnt, parent;
            if (parent_id && el.parent_id !== parent_id) {
              return true;
            }
            cnt = [
              {
                title: 'шагов',
                cnt_today: 20,
                days: [
                  {
                    d: '2013-03-01',
                    cnt: 12
                  }, {
                    d: '2013-03-02',
                    cnt: 10
                  }, {
                    d: '2013-03-03',
                    cnt: 8
                  }, {
                    d: '2013-03-05',
                    cnt: 15
                  }, {
                    d: '2013-03-12',
                    cnt: 21
                  }
                ]
              }, {
                title: 'прошёл км.',
                cnt_today: 30,
                days: [
                  {
                    d: '2013-03-01',
                    cnt: 12
                  }, {
                    d: '2013-03-02',
                    cnt: 10
                  }, {
                    d: '2013-03-03',
                    cnt: 8
                  }, {
                    d: '2013-03-05',
                    cnt: 15
                  }, {
                    d: '2013-03-12',
                    cnt: 21
                  }
                ]
              }, {
                title: 'отжиманий',
                cnt_today: 19,
                days: [
                  {
                    d: '2013-03-01',
                    cnt: 12
                  }, {
                    d: '2013-03-02',
                    cnt: 10
                  }, {
                    d: '2013-03-03',
                    cnt: 8
                  }, {
                    d: '2013-03-05',
                    cnt: 15
                  }, {
                    d: '2013-03-12',
                    cnt: 21
                  }
                ]
              }
            ];
            if (el._id && el._id !== 1) {
              el._path = mythis.jsGetPath(el._id);
            }
            el.importance = el.importance ? el.importance : 50;
            el.tags = el.tags ? el.tags : [];
            el.counters = cnt;
            if (!el.panel) {
              el.panel = [
                {
                  _open: false
                }, {
                  _open: true
                }, {
                  _open: false
                }, {
                  _open: false
                }
              ];
            }
            if (false) {
              el.dates = {
                startDate: el.dates ? moment(el.dates.startDate) : "",
                endDate: el.dates ? moment(el.dates.endDate) : ""
              };
            }
            parent = 'n' + el.parent_id;
            if (!mythis.db_parents[parent]) {
              mythis.db_parents[parent] = [];
            }
            mythis.db_parents[parent].push(el);
            return true;
          });
          console.info("FIRST = ", mythis._db.tree[0]);
          _.each(mythis._db.tree, function(el, key) {
            var parent;
            if (!el._id) {
              console.info("path", el._id, el._path, key);
            }
            parent = 'n' + el._id;
            if (mythis.db_parents[parent]) {
              el._childs = mythis.db_parents[parent].length;
            } else {
              el._childs = 0;
              el._open = false;
            }
            return true;
          });
          mythis.clearCache();
          console.info(3);
          true;
          mymap = function(doc, emit) {
            if (doc.text && doc.text.indexOf('жопа') !== -1) {
              return emit(doc.date, doc.title, doc);
            }
          };
          this.newView('tree', 'by_date', mymap);
          mymap_calendar = function(doc, emit) {
            if (doc.date2) {
              return emit(doc.date2, doc, doc);
            }
          };
          myreduce_calendar = function(memo, values) {
            var key;
            key = values.key;
            key = moment(values.key);
            key = key.format("YYYY-MM-DD");
            if (!memo[key]) {
              memo[key] = [];
            }
            if (values.value) {
              return memo[key].push(values.value);
            }
          };
          return this.newView('tasks', 'tasks_by_date', mymap_calendar, myreduce_calendar);
        },
        getTree: function(args) {
          return this._db.tree;
        },
        jsFindByParent: _.memoize(function(args) {
          var elements;
          elements = _.sortBy(this.db_parents['n' + args], function(value, key) {
            return value.pos;
          });
          return elements = _.filter(elements, function(value) {
            return value.del !== 1;
          });
        }),
        'web_tags': [
          {
            id: 1,
            parent: 0,
            title: "Кулинария",
            cnt: 1
          }, {
            id: 5,
            parent: 1,
            title: "Супы",
            cnt: 6
          }, {
            id: 7,
            parent: 5,
            title: "Диетические",
            cnt: 1
          }, {
            id: 8,
            parent: 5,
            title: "Фруктовые",
            cnt: 3
          }, {
            id: 6,
            parent: 1,
            title: "Каши",
            cnt: 3
          }, {
            id: 2,
            parent: 0,
            title: "Рукоделие",
            cnt: 1
          }, {
            id: 9,
            parent: 2,
            title: "Холодный фарфор",
            cnt: 2
          }, {
            id: 10,
            parent: 2,
            title: "Тильда",
            cnt: 0
          }, {
            id: 10,
            parent: 2,
            title: "Скрапбукинг",
            cnt: 1
          }, {
            id: 10,
            parent: 2,
            title: "Канзаши",
            cnt: 3
          }, {
            id: 10,
            parent: 2,
            title: "Бисероплетение",
            cnt: 211
          }, {
            id: 10,
            parent: 2,
            title: "Вязание",
            cnt: 1
          }, {
            id: 3,
            parent: 0,
            title: "Мои новости",
            cnt: 8
          }, {
            id: 4,
            parent: 0,
            title: "Я в лицах",
            cnt: 11
          }
        ],
        tree_tags: [
          {
            id: 1,
            parent: 0,
            title: "GTD",
            cnt: 0
          }, {
            id: 4,
            parent: 1,
            title: "Входящие",
            cnt: 12
          }, {
            id: 2,
            parent: 1,
            title: "Следующие действия",
            cnt: 4
          }, {
            id: 3,
            parent: 1,
            title: "Когда-нибудь",
            cnt: 24
          }, {
            id: 5,
            parent: 1,
            title: "Календарь",
            cnt: 120
          }, {
            id: 6,
            parent: 1,
            title: "Ожидание",
            cnt: 8
          }, {
            id: 7,
            parent: 1,
            title: "Проект",
            cnt: 3
          }, {
            id: 8,
            parent: 0,
            title: "Рабочие дела",
            cnt: 4
          }, {
            id: 9,
            parent: 0,
            title: "Домашние дела",
            cnt: 8
          }, {
            id: 10,
            parent: 0,
            title: "Мой сайт",
            cnt: 18
          }, {
            id: 11,
            parent: 0,
            title: "Чтение",
            cnt: 0
          }, {
            id: 12,
            parent: 11,
            title: "Почитать",
            cnt: 2
          }, {
            id: 13,
            parent: 11,
            title: "Прочитано",
            cnt: 243
          }
        ],
        jsFindByParentWeb: function(args) {
          return _.filter(this.web_tags, function(el) {
            return el.parent_id === args;
          });
        },
        jsFindByParentTags: function(args) {
          return _.filter(this.tree_tags, function(el) {
            return el.parent_id === args;
          });
        },
        'first_element': {
          title: '4tree',
          parent_id: '0',
          _path: ['2']
        },
        'jsFind': _.memoize(function(id) {
          var tree_by_id;
          if (id === 1) {
            return this.first_element;
          }
          tree_by_id = _.find(this._db.tree, function(el) {
            return el._id === id;
          });
          if (id === void 0) {
            return void 0;
          }
          if (tree_by_id) {
            return tree_by_id;
          }
        }),
        'jsGetPath': _.memoize(function(id) {
          var el, path, prevent_recursive;
          if (id === 1 || id === 0) {
            return ['100'];
          }
          path = [];
          prevent_recursive = 1000;
          while ((el = this.jsFind(id)) && (prevent_recursive--)) {
            id = el.parent_id;
            if (el.parent_id) {
              path.push(el._id);
            }
          }
          path.push($rootScope.$$childTail.set.top_parent_id);
          return path.reverse();
        }),
        jsView: function() {
          return this._cache;
        },
        newView: function(db_name, view_name, mymap, myreduce) {
          var mythis;
          mythis = this;
          mythis._cache[db_name] = {};
          if (!mythis._cache[db_name]['views']) {
            mythis._cache[db_name]['views'] = {};
          }
          if (!mythis._cache[db_name]['views'][view_name]) {
            return mythis._cache[db_name]['views'][view_name] = {
              rows: [],
              invalid: [],
              'map': mymap,
              'reduce': myreduce
            };
          }
        },
        getView: function(db_name, view_name) {
          var view;
          view = this._cache[db_name]['views'][view_name];
          if (view.rows.length && view.invalid.length === 0) {
            return view;
          } else if (view.invalid.length > 0 && view.rows.length > 0) {
            this.generateView(db_name, view_name, view.invalid);
            return view;
          } else {
            this.generateView(db_name, view_name);
            return view;
          }
        },
        generateView: function(db_name, view_name, view_invalid) {
          var emit, memo, myrows, view;
          view = this._cache[db_name]['views'][view_name];
          if ((view_invalid != null ? view_invalid[0] : void 0) === 0) {
            view_invalid = false;
          }
          if (view_invalid) {
            myrows = [
              _.find(this._db[db_name], function(el) {
                return view_invalid.indexOf(el._id) !== -1;
              })
            ];
            view.rows = _.filter(view.rows, function(el) {
              return view_invalid.indexOf(el._id) === -1;
            });
          } else {
            myrows = this._db[db_name];
          }
          memo = {};
          emit = function(key, value, doc) {
            if (!view.rows) {
              view.rows = [];
            }
            view.rows.push({
              id: doc._id,
              key: key,
              value: value
            });
            if (!view_invalid && view['reduce']) {
              return view['reduce'](memo, {
                key: key,
                value: value
              });
            }
          };
          _.each(myrows, function(doc, key) {
            var result;
            return result = view['map'](doc, emit);
          });
          if (view_invalid && view['reduce']) {
            _.each(view.rows, function(doc) {
              return view['reduce'](memo, {
                key: doc.key,
                value: doc.value
              });
            });
          }
          view.rows = _.sortBy(view.rows, function(el) {
            return el.key;
          });
          view.invalid = [];
          return view.result = memo;
        },
        refreshView: function(db_name, ids, new_value, old_value) {
          var mythis;
          mythis = this;
          return _.each(ids, function(id) {
            return _.each(mythis._cache[db_name].views, function(view) {
              return view.invalid.push(id);
            });
          });
        },
        loadTasks: function() {
          return this._db.tasks = [
            {
              id: 0,
              tree_id: '1034',
              date1: new Date(2014, 2, 31),
              date2: new Date(2014, 2, 31, 8, 30),
              title: 'Записаться в бассейн, это очень важно и нужно это сделать очень срочно, потомучто плавать это круто и всем нравится и это очень даже прикольно'
            }, {
              id: 1,
              tree_id: '1034',
              date1: new Date(2014, 3, 4, 12, 30, 0),
              date2: new Date(2014, 3, 4, 10, 30, 0),
              title: 'Начало сериала на ТНТ про дружбу народов',
              did: new Date()
            }, {
              id: 2,
              tree_id: '1034',
              date1: new Date(2013, 2, 3),
              date2: new Date(2014, 3, 4, 17, 30, 0),
              title: 'Как жизнь? написать письмо',
              did: new Date()
            }, {
              id: 3,
              tree_id: '1034',
              date1: new Date(2014, 1, 4, 12, 30, 0),
              date2: new Date(2014, 3, 2, 18, 30, 0),
              title: 'Урал край голубых озёр - написать статью'
            }, {
              id: 4,
              tree_id: '1034',
              date1: new Date(new Date().getTime() - 1000 * 60 * 220),
              date2: new Date(new Date().getTime() - 1000 * 60 * 220),
              title: 'Двадцать минут назад я тут был :) И мне тут понравилось.'
            }, {
              id: 5,
              tree_id: '1034',
              date1: '',
              date2: new Date(2014, 3, 8, 12, 30, 0),
              title: 'Как жизнь? написать письмо'
            }, {
              id: 8,
              tree_id: '1034',
              date1: '',
              date2: new Date(2014, 3, 8, 12, 30, 0),
              title: 'Нужно купить Мартини'
            }, {
              id: 6,
              tree_id: '1034',
              date1: new Date(new Date().getTime() + 1000 * 60 * 20),
              date2: new Date(new Date().getTime() + 1000 * 60 * 20),
              title: 'Через 20 минут выходим и нам нужно ехать будет в театр'
            }, {
              id: -1,
              tree_id: '2138',
              date1: new Date(2014, 2, 29),
              date2: new Date(2014, 2, 29, 14, 20),
              title: 'Очень важное дело, которое нужно сделать сегодня'
            }
          ];
        },
        clearCache: function() {
          return _.each(this, function(fn) {
            if (fn) {
              return fn.cache = {};
            }
          });
        },
        getTasks: function() {
          return this._db.tasks;
        },
        getTasksByTreeId: _.memoize(function(tree_id, only_next) {
          var answer, answer1;
          answer = _.filter(this._db.tasks, function(el) {
            return el.tree_id === tree_id;
          });
          answer = _.sortBy(answer, function(el) {
            return el.date1;
          });
          if (only_next === true) {
            answer1 = _.find(answer, function(el) {
              return el.date1 && !el.did;
            });
            if (!answer1) {
              answer1 = _.find(answer, function(el) {
                return !el.did;
              });
            }
            if (answer1) {
              answer = [answer1];
            } else {
              answer = void 0;
            }
          } else {
            answer = _.sortBy(answer, function(el) {
              var res;
              if (el.date1) {
                res = -el.date1.getTime();
                res = res + 100000000000000;
              } else {
                res = new Date().getTime();
                res = res + 200000000000000;
              }
              if (el.did) {
                res = res + 500000000000000;
              }
              return res;
            });
          }
          if (answer) {
            return answer;
          } else {
            return [];
          }
        }, function(tree_id, only_next) {
          return tree_id + only_next;
        }),
        jsExpand: function(id, make_open) {
          var focus;
          console.time('expand');
          focus = $rootScope.$$childTail.set.focus;
          _.each(this._db.tree, function(el) {
            if (el._path && el._path.indexOf(id) !== -1) {
              if (!(make_open === true && el._childs > 50)) {
                if (el._childs > 0) {
                  el.panel[focus]._open = make_open;
                }
              } else {
                el._open = void 0;
              }
            }
          });
          return console.timeEnd('expand');
        },
        tree_template: function() {
          return {
            title: '',
            parent_id: '',
            _id: ''
          };
        },
        getIcon: function(tree) {
          if (!tree.icon) {
            return 'icon-heart-empty';
          } else {
            return tree.icon;
          }
        },
        diffForSort: function(tree) {
          var found, parents;
          parents = this.db_parents['n' + tree.parent_id];
          parents = _.sortBy(parents, function(value) {
            return value.pos;
          });
          found = _.find(parents, function(value) {
            return value.pos > tree.pos;
          });
          if (found && found.pos) {
            console.info("POS = ", found.pos, tree.pos);
            return (parseInt(1000000000000 * (found.pos - tree.pos) / 1.1)) / 1000000000000;
          } else {
            return 1;
          }
        },
        jsAddNote: function(tree, make_child) {
          var focus, new_note;
          focus = $rootScope.$$childTail.set.focus;
          console.info("AddNote", tree);
          new_note = new this.tree_template;
          new_note.title = $rootScope.$$childTail.set.new_title;
          new_note._id = new ObjectId().toString();
          new_note['_new'] = true;
          new_note._focus_me = true;
          new_note.pos = tree.pos + this.diffForSort(tree);
          this._db.tree.push(new_note);
          if (!make_child) {
            new_note.parent_id = tree.parent_id;
            this.refreshParentsIndex(tree.parent_id);
          } else {
            new_note.parent_id = tree._id;
            this.refreshParentsIndex();
            tree._open = true;
          }
          return $rootScope.$$childTail.db.main_node[focus] = new_note;
        },
        addNote: function(tree, new_note_title, make_child) {
          var focus, new_note;
          focus = $rootScope.$$childTail.set.focus;
          console.info('new_note', tree, new_note_title);
          new_note = new this.tree_template;
          new_note.title = new_note_title;
          new_note._id = new ObjectId().toString();
          new_note.pos = tree.pos + this.diffForSort(tree);
          tree._add_show = false;
          this._db.tree.push(new_note);
          if (!make_child) {
            new_note.parent_id = tree.parent_id;
            this.refreshParentsIndex(tree.parent_id);
          } else {
            new_note.parent_id = tree._id;
            this.refreshParentsIndex();
            tree._open = true;
          }
          return $rootScope.$$childTail.db.main_node[focus] = new_note;
        },
        jsEnterPress: function(event, scope, tree) {
          if (scope && scope.tree._new) {
            scope.tree['_new'] = false;
          }
          return event.target.blur();
        },
        jsBlur: function(event, scope, tree) {
          if (tree) {
            return tree['_new'] = false;
          }
        },
        jsFindPreviusParent: function(tree) {
          var found, parents;
          parents = $rootScope.$$childTail.fn.service.db_tree.db_parents['n' + tree.parent_id];
          parents = _.sortBy(parents, function(value) {
            return value.pos;
          });
          found = _.filter(parents, function(value) {
            return value.pos < tree.pos;
          });
          return found = found[found.length - 1];
        },
        jsEscPress: function(event, scope) {
          var focus, prev_note;
          focus = $rootScope.$$childTail.set.focus;
          prev_note = $rootScope.$$childTail.fn.service.db_tree.jsFindPreviusParent(scope.tree);
          if (scope.tree['_new']) {
            scope.tree.del = 1;
          }
          if (prev_note) {
            $rootScope.$$childTail.db.main_node[focus] = prev_note;
          }
          return event.target.blur();
        },
        findMaxPos: function(prev_note_id) {
          var parents;
          parents = $rootScope.$$childTail.fn.service.db_tree.db_parents['n' + prev_note_id];
          parents = _.sortBy(parents, function(value) {
            return value.pos;
          });
          if (parents.length) {
            return parents[parents.length - 1].pos + 1;
          } else {
            return 1;
          }
        },
        jsTabPress: function(event, scope, tree) {
          var db_tree, focus, main_node, parent_note, prev_note, shift;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (db_tree.jsIsTree()) {
            event.stopPropagation();
            event.preventDefault();
            main_node = $rootScope.$$childTail.db.main_node[focus];
            console.info(main_node);
            shift = event.shiftKey;
            if (!shift) {
              prev_note = db_tree.jsFindPreviusParent(main_node);
              if (prev_note) {
                prev_note.panel[focus]._open = true;
                main_node.parent_id = prev_note._id;
                main_node.pos = db_tree.findMaxPos(prev_note._id);
                main_node._focus_me = true;
                return db_tree.refreshParentsIndex();
              }
            } else {
              parent_note = db_tree.jsFind(main_node.parent_id);
              console.info({
                parent_note: parent_note
              });
              if (parent_note && parent_note.folder !== 'main') {
                main_node.parent_id = parent_note.parent_id;
                main_node.pos = parent_note.pos + db_tree.diffForSort(parent_note);
                main_node._focus_me = true;
                return db_tree.refreshParentsIndex();
              }
            }
          }
        },
        jsFindNext: function(tree, ignore_open) {
          var db_tree, focus, found, found_key, next, parents;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (tree && tree.panel[focus]._open && !ignore_open) {
            if (db_tree.db_parents['n' + tree._id]) {
              found = db_tree.db_parents['n' + tree._id][0];
            }
            return found;
          }
          parents = db_tree.db_parents['n' + tree.parent_id];
          parents = _.sortBy(parents, function(value) {
            return value.pos;
          });
          found_key = 0;
          found = _.find(parents, function(value, key) {
            if (value._id === tree._id) {
              found_key = key;
            }
            return value._id === tree._id;
          });
          found = parents[found_key + 1];
          if (!found) {
            console.info('need_to_parent');
            next = db_tree.jsFind(tree.parent_id);
            if (next) {
              found = db_tree.jsFindNext(next, 'ignore_open');
            }
          }
          return found;
        },
        jsFindPrev: function(tree, ignore_open, last_and_deep) {
          var db_tree, focus, found, found_key, parents;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if ((tree && tree._open2 && !ignore_open) || last_and_deep) {
            parents = db_tree.db_parents['n' + tree._id];
            found = parents[parents.length - 1];
            if (last_and_deep && found._open) {
              return db_tree.jsFindPrev(found, 'true', 'last_and_deep');
            } else {
              return found;
            }
          }
          parents = db_tree.db_parents['n' + tree.parent_id];
          parents = _.sortBy(parents, function(value) {
            return value.pos;
          });
          found_key = 0;
          found = _.find(parents, function(value, key) {
            if (value._id === tree._id) {
              found_key = key;
            }
            return value._id === tree._id;
          });
          found = parents[found_key - 1];
          if (found && found.panel[focus]._open) {
            found = db_tree.jsFindPrev(db_tree.jsFind(found._id), 'ignore_open', 'last_and_deep');
          }
          if (!found && !ignore_open && !last_and_deep) {
            if (tree.parent_id !== $rootScope.$$childTail.set.main_parent_id[focus]) {
              found = db_tree.jsFind(tree.parent_id);
            }
          }
          return found;
        },
        jsIsTree: function() {
          var focus, widget_index;
          focus = $rootScope.$$childTail.set.focus;
          widget_index = $rootScope.$$childTail.set.panel[focus].active;
          if ([0].indexOf(widget_index) !== -1) {
            return true;
          } else {
            return false;
          }
        },
        jsUpPress: function(event, scope) {
          var db_tree, focus, found;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (db_tree.jsIsTree()) {
            event.stopPropagation();
            event.preventDefault();
            found = db_tree.jsFindPrev($rootScope.$$childTail.db.main_node[focus]);
            if (found) {
              return $rootScope.$$childTail.db.main_node[focus] = found;
            }
          }
        },
        jsDownPress: function(event, scope) {
          var db_tree, focus, found;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (db_tree.jsIsTree()) {
            event.stopPropagation();
            event.preventDefault();
            found = db_tree.jsFindNext($rootScope.$$childTail.db.main_node[focus]);
            if (found) {
              return $rootScope.$$childTail.db.main_node[focus] = found;
            }
          }
        },
        jsLeftPress: function(event, scope) {
          var db_tree, focus;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (db_tree.jsIsTree()) {
            event.stopPropagation();
            event.preventDefault();
            if ($rootScope.$$childTail.db.main_node[focus].panel[focus]._open) {
              return $rootScope.$$childTail.db.main_node[focus].panel[focus]._open = false;
            } else {
              return true;
            }
          }
        },
        jsRightPress: function(event, scope) {
          var db_tree, focus;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (db_tree.jsIsTree()) {
            event.stopPropagation();
            event.preventDefault();
            if (!$rootScope.$$childTail.db.main_node[focus].panel[focus]._open) {
              return $rootScope.$$childTail.db.main_node[focus].panel[focus]._open = true;
            } else {
              return true;
            }
          }
        },
        jsFocus1: function() {
          return $rootScope.$$childTail.set.focus = 0;
        },
        jsFocus2: function() {
          return $rootScope.$$childTail.set.focus = 1;
        },
        jsFocus3: function() {
          return $rootScope.$$childTail.set.focus = 2;
        },
        jsFocus4: function() {
          return $rootScope.$$childTail.set.focus = 3;
        }
      };
    }
  ]);

}).call(this);
