// Generated by CoffeeScript 1.6.3
(function() {
  angular.module("4treeApp").factory('datasourceTree', [
    '$timeout', 'db_tree', '$rootScope', function($timeout, db_tree, $rootScope) {
      return {
        watchList: [],
        get: function(index, count, success) {
          var i, result, _i, _ref;
          console.info(index);
          if (index > db_tree._db.tree.length) {
            success([]);
          }
          result = [];
          for (i = _i = index, _ref = index + count - 1; index <= _ref ? _i <= _ref : _i >= _ref; i = index <= _ref ? ++_i : --_i) {
            if (db_tree._db.tree[i]) {
              result.push(db_tree._db.tree[i]);
            }
          }
          return success(result);
        }
      };
    }
  ]);

  angular.module("4treeApp").factory('datasource', [
    '$timeout', '$rootScope', function($timeout, $rootScope) {
      return {
        get: function(index, count, success) {
          var i, result, _i, _ref;
          result = [];
          for (i = _i = index, _ref = index + count - 1; index <= _ref ? _i <= _ref : _i >= _ref; i = index <= _ref ? ++_i : --_i) {
            result.push("{i}");
          }
          return success(result);
        },
        scope2: $rootScope
      };
    }
  ]);

  angular.module("4treeApp").service('db_tree', [
    '$translate', '$http', '$q', '$rootScope', 'oAuth2Api', '$timeout', function($translate, $http, $q, $rootScope, oAuth2Api, $timeout, syncApi) {
      return {
        _db: {
          texts: {}
        },
        _cache: {},
        salt: function() {
          return 'Salt is a mineral substance composed';
        },
        pepper: function() {
          return ' primarily of sodium chloride (NaCl)';
        },
        constructor: function() {
          var mythis;
          mythis = this;
          $rootScope.$on('my-sorted', function(event, data) {
            return $timeout(function() {
              var element, new_value, old_value;
              console.info("SORTED", data);
              element = mythis.jsFind(data.from_id);
              old_value = _.clone(element);
              element.parent_id = data.to_id;
              new_value = element;
              $rootScope.$emit("jsFindAndSaveDiff", 'tree', new_value, old_value);
              mythis.refreshParentsIndex();
              return $timeout(function() {
                return $("ul > .tree_tmpl").remove();
              });
            });
          });
          $rootScope.$on('my-created', function(event, data) {
            return console.info("CREATED", data);
          });
          this.loadTasks();
          if (!this._cache) {
            this._cache = {};
          }
          if (!this._db.tree) {
            this._db.tree = {};
            return this.refreshParentsIndex();
          }
        },
        clearCache: function() {
          _.each(this, function(fn) {
            if (fn) {
              return fn.cache = {};
            }
          });
          return _.each($rootScope.$$childTail.fn.service.calendarBox, function(fn) {
            if (fn) {
              return fn.cache = {};
            }
          });
        },
        getTreeFromeWebOrLocal: function() {
          var dfd, mythis;
          mythis = this;
          this.dbInit();
          dfd = $.Deferred();
          this.ydnLoadFromLocal(mythis).then(function(records) {
            if (!records.tree || Object.keys(records.tree).length === 0) {
              console.info('NEED DATA FROM NET');
              return mythis.getTreeFromWeb().then(function(data) {
                var result;
                result = {};
                _.each(data, function(records, db_name) {
                  mythis.ydnSaveToLocal(db_name, records).then(function() {
                    return console.info('SAVED TO LOCAL');
                  });
                  return result[db_name] = records;
                });
                dfd.resolve(result);
                return result = void 0;
              });
            } else {
              console.info('ALL DATA FROM LOCAL');
              return dfd.resolve(records);
            }
          });
          return dfd.promise();
        },
        getTreeFromNet: function() {
          var dfd, mythis;
          mythis = this;
          dfd = $q.defer();
          console.time('ALL DATA LOADED');
          this.getTreeFromeWebOrLocal().then(function(records) {
            var found;
            console.info('loaded = ', records);
            _.each(records, function(data, db_name) {
              if (mythis.dont_store_to_memory.indexOf(db_name) === -1) {
                return mythis._db[db_name] = data;
              }
            });
            mythis.refreshParentsIndex();
            $rootScope.$$childTail.set.tree_loaded = true;
            $rootScope.$$childTail.db.main_node = [];
            $rootScope.$broadcast('tree_loaded');
            found = _.find(mythis._db['tree'], function(el) {
              return el._id === '535b3127bfb1d3a67cca7f1e';
            });
            $rootScope.$$childTail.db.main_node = [{}, found, {}, {}];
            mythis.clearCache();
            console.timeEnd('ALL DATA LOADED');
            records = void 0;
            return dfd.resolve();
          });
          return dfd.promise;
        },
        getTreeFromWeb: function() {
          var dfd, mythis;
          dfd = $q.defer();
          mythis = this;
          oAuth2Api.jsGetToken().then(function(access_token) {
            return $http({
              url: '/api/v2/tree',
              method: "GET",
              params: {
                user_id: '5330ff92898a2b63c2f7095f',
                access_token: access_token
              }
            }).then(function(result) {
              return dfd.resolve(result.data);
            });
          });
          return dfd.promise;
        },
        db: void 0,
        jsSaveElementToLocal: function(db_name, el) {
          var dfd;
          dfd = $.Deferred();
          if (el && el.$$hashKey) {
            delete el.$$hashKey;
          }
          this.db.put(db_name, el).done(function() {
            return dfd.resolve();
          });
          return dfd.promise();
        },
        store_schema: [
          {
            name: 'tree',
            keyPath: '_id',
            autoIncrement: false
          }, {
            name: 'tasks',
            keyPath: '_id',
            autoIncrement: false
          }, {
            name: 'texts',
            keyPath: '_id',
            autoIncrement: false
          }, {
            name: '_diffs',
            keyPath: '_id',
            autoIncrement: false
          }
        ],
        dont_store_to_memory: ['texts'],
        dbInit: function() {
          var options, schema;
          schema = {
            stores: this.store_schema
          };
          options = {};
          this.db = new ydn.db.Storage('_db.tree', schema, options);
          if (false) {
            return this.db.search('name', 'Рабочие').done(function(x) {
              return console.info('found', x);
            });
          }
        },
        ydnSaveToLocal: function(db_name, records) {
          var dfd, mythis;
          dfd = $.Deferred();
          this.dbInit();
          mythis = this;
          this.db.clear(db_name).done(function() {
            return async.eachLimit(Object.keys(records), 200, function(el_name, callback) {
              var el;
              el = records[el_name];
              if (el.$$hashKey) {
                delete el.$$hashKey;
              }
              return mythis.jsSaveElementToLocal(db_name, el).then(function() {
                return callback();
              });
            }, function(err) {
              return dfd.resolve();
            });
          });
          return dfd.promise();
        },
        ydnLoadFromLocal: function(mythis) {
          var dfd, result;
          this.dbInit();
          dfd = $.Deferred();
          console.time('load_local');
          result = {};
          mythis.db.values('_diffs', null, 999999999).done(function(diffs) {
            return async.each(mythis.store_schema, function(table_schema, callback) {
              var db_name;
              db_name = table_schema.name;
              if (mythis.dont_store_to_memory.indexOf(db_name) === -1) {
                return mythis.db.values(db_name, null, 999999999).done(function(records) {
                  var data_to_load;
                  if (diffs) {
                    _.each(diffs, function(diff) {
                      var found;
                      found = _.find(records, function(record) {
                        return record._id === diff._id;
                      });
                      if (found && db_name === diff.db_name) {
                        console.info('PATCH to ', diff._id, mythis.diff.patch(found, diff.patch));
                        return found = mythis.diff.patch(found, diff.patch);
                      }
                    });
                  }
                  data_to_load = {};
                  _.each(records, function(record) {
                    if (record != null ? record._id : void 0) {
                      return data_to_load[record._id] = record;
                    }
                  });
                  result[db_name] = data_to_load;
                  console.info(result);
                  return callback();
                });
              } else {
                return callback();
              }
            }, function() {
              console.timeEnd('load_local');
              dfd.resolve(result);
              return result = void 0;
            });
          });
          return dfd.promise();
        },
        refreshParentsIndex: function(parent_id) {
          var focus, found, mymap, mymap_calendar, myreduce_calendar, mythis;
          focus = $rootScope.$$childTail.set.focus;
          mythis = this;
          if (!parent_id) {
            mythis.db_parents = {};
          } else {
            mythis.db_parents['n' + parent_id] = [];
          }
          found = _.find(this._db.tree, function(el) {
            return el.folder === 'main';
          });
          if (found) {
            if ($rootScope.$$childTail.set.main_parent_id.length === 0) {
              $rootScope.$$childTail.set.main_parent_id[0] = found._id;
              $rootScope.$$childTail.set.main_parent_id[1] = found._id;
              $rootScope.$$childTail.set.main_parent_id[2] = found._id;
              $rootScope.$$childTail.set.main_parent_id[3] = found._id;
            }
            $rootScope.$$childTail.set.top_parent_id = found._id;
          }
          _.each(this._db.tree, function(el) {
            var cnt, parent;
            if (parent_id && el.parent_id !== parent_id) {
              return true;
            }
            cnt = [
              {
                title: 'шагов',
                cnt_today: 20,
                days: [
                  {
                    d: '2013-03-01',
                    cnt: 12
                  }, {
                    d: '2013-03-02',
                    cnt: 10
                  }, {
                    d: '2013-03-03',
                    cnt: 8
                  }, {
                    d: '2013-03-05',
                    cnt: 15
                  }, {
                    d: '2013-03-12',
                    cnt: 21
                  }
                ]
              }, {
                title: 'прошёл км.',
                cnt_today: 30,
                days: [
                  {
                    d: '2013-03-01',
                    cnt: 12
                  }, {
                    d: '2013-03-02',
                    cnt: 10
                  }, {
                    d: '2013-03-03',
                    cnt: 8
                  }, {
                    d: '2013-03-05',
                    cnt: 15
                  }, {
                    d: '2013-03-12',
                    cnt: 21
                  }
                ]
              }, {
                title: 'отжиманий',
                cnt_today: 19,
                days: [
                  {
                    d: '2013-03-01',
                    cnt: 12
                  }, {
                    d: '2013-03-02',
                    cnt: 10
                  }, {
                    d: '2013-03-03',
                    cnt: 8
                  }, {
                    d: '2013-03-05',
                    cnt: 15
                  }, {
                    d: '2013-03-12',
                    cnt: 21
                  }
                ]
              }
            ];
            if (el._id && el._id !== 1) {
              el._path = mythis.jsGetPath(el._id);
            }
            el.importance = el.importance ? el.importance : 50;
            el.tags = el.tags ? el.tags : [];
            if (!el.counters) {
              el.counters = cnt;
            }
            if (!el.panel) {
              el.panel = [
                {
                  _open: false
                }, {
                  _open: false
                }, {
                  _open: false
                }, {
                  _open: false
                }
              ];
            }
            if (false) {
              el.dates = {
                startDate: el.dates ? moment(el.dates.startDate) : "",
                endDate: el.dates ? moment(el.dates.endDate) : ""
              };
            }
            parent = 'n' + el.parent_id;
            if (!mythis.db_parents[parent]) {
              mythis.db_parents[parent] = [];
            }
            mythis.db_parents[parent].push(el);
            return true;
          });
          _.each(mythis._db.tree, function(el, key) {
            var parent;
            if (!el._id) {
              console.info("path", el._id, el._path, key);
            }
            parent = 'n' + el._id;
            if (mythis.db_parents[parent]) {
              el._childs = mythis.db_parents[parent].length;
            } else {
              el._childs = 0;
              el._open = false;
            }
            return true;
          });
          mythis.clearCache();
          true;
          mymap = function(doc, emit) {
            if (doc.text && doc.text.indexOf('жопа') !== -1) {
              return emit(doc.date, doc.title, doc);
            }
          };
          mymap_calendar = function(doc, emit) {
            if (doc != null ? doc.date2 : void 0) {
              return emit(doc.date2, doc, doc);
            }
          };
          myreduce_calendar = function(memo, values) {
            var key;
            key = values.key;
            key = moment(values.key);
            key = key.format("YYYY-MM-DD");
            if (!memo[key]) {
              memo[key] = [];
            }
            if (values.value) {
              return memo[key].push(values.value);
            }
          };
          return this.newView('tasks', 'tasks_by_date', mymap_calendar, myreduce_calendar);
        },
        getTree: function(args) {
          return this._db.tree;
        },
        jsFindByParent: _.memoize(function(args) {
          var elements;
          elements = _.sortBy(this.db_parents['n' + args], function(value, key) {
            return value.pos;
          });
          return elements = _.filter(elements, function(value) {
            return value.del !== 1;
          });
        }),
        'web_tags': [
          {
            id: 1,
            parent: 0,
            title: "Кулинария",
            cnt: 1
          }, {
            id: 5,
            parent: 1,
            title: "Супы",
            cnt: 6
          }, {
            id: 7,
            parent: 5,
            title: "Диетические",
            cnt: 1
          }, {
            id: 8,
            parent: 5,
            title: "Фруктовые",
            cnt: 3
          }, {
            id: 6,
            parent: 1,
            title: "Каши",
            cnt: 3
          }, {
            id: 2,
            parent: 0,
            title: "Рукоделие",
            cnt: 1
          }, {
            id: 9,
            parent: 2,
            title: "Холодный фарфор",
            cnt: 2
          }, {
            id: 10,
            parent: 2,
            title: "Тильда",
            cnt: 0
          }, {
            id: 10,
            parent: 2,
            title: "Скрапбукинг",
            cnt: 1
          }, {
            id: 10,
            parent: 2,
            title: "Канзаши",
            cnt: 3
          }, {
            id: 10,
            parent: 2,
            title: "Бисероплетение",
            cnt: 211
          }, {
            id: 10,
            parent: 2,
            title: "Вязание",
            cnt: 1
          }, {
            id: 3,
            parent: 0,
            title: "Мои новости",
            cnt: 8
          }, {
            id: 4,
            parent: 0,
            title: "Я в лицах",
            cnt: 11
          }
        ],
        tree_tags: [
          {
            id: 1,
            parent: 0,
            title: "GTD",
            cnt: 0
          }, {
            id: 4,
            parent: 1,
            title: "Входящие",
            cnt: 12
          }, {
            id: 2,
            parent: 1,
            title: "Следующие действия",
            cnt: 4
          }, {
            id: 3,
            parent: 1,
            title: "Когда-нибудь",
            cnt: 24
          }, {
            id: 5,
            parent: 1,
            title: "Календарь",
            cnt: 120
          }, {
            id: 6,
            parent: 1,
            title: "Ожидание",
            cnt: 8
          }, {
            id: 7,
            parent: 1,
            title: "Проект",
            cnt: 3
          }, {
            id: 8,
            parent: 0,
            title: "Рабочие дела",
            cnt: 4
          }, {
            id: 9,
            parent: 0,
            title: "Домашние дела",
            cnt: 8
          }, {
            id: 10,
            parent: 0,
            title: "Мой сайт",
            cnt: 18
          }, {
            id: 11,
            parent: 0,
            title: "Чтение",
            cnt: 0
          }, {
            id: 12,
            parent: 11,
            title: "Почитать",
            cnt: 2
          }, {
            id: 13,
            parent: 11,
            title: "Прочитано",
            cnt: 243
          }
        ],
        jsFindByParentWeb: function(args) {
          return _.filter(this.web_tags, function(el) {
            return el.parent_id === args;
          });
        },
        jsFindByParentTags: function(args) {
          return _.filter(this.tree_tags, function(el) {
            return el.parent_id === args;
          });
        },
        'first_element': {
          title: '4tree',
          parent_id: '0',
          _path: ['2']
        },
        'jsFind': function(id) {
          var tree_by_id, _ref, _ref1;
          if (id === 1) {
            return this.first_element;
          }
          if ((_ref = this._db) != null ? (_ref1 = _ref['tree']) != null ? _ref1[id] : void 0 : void 0) {
            tree_by_id = _.find(this._db['tree'][id]);
          }
          if (id === void 0) {
            return void 0;
          }
          return tree_by_id;
        },
        'jsGetPath': _.memoize(function(id) {
          var el, path, prevent_recursive;
          if (id === 1 || id === 0) {
            return ['100'];
          }
          path = [];
          prevent_recursive = 1000;
          while ((el = this.jsFind(id)) && (prevent_recursive--)) {
            id = el.parent_id;
            if (el.parent_id) {
              path.push(el._id);
            }
          }
          path.push($rootScope.$$childTail.set.top_parent_id);
          return path.reverse();
        }),
        jsView: function() {
          return this._cache;
        },
        newView: function(db_name, view_name, mymap, myreduce) {
          var mythis;
          mythis = this;
          mythis._cache[db_name] = {};
          if (!mythis._cache[db_name]['views']) {
            mythis._cache[db_name]['views'] = {};
          }
          if (!mythis._cache[db_name]['views'][view_name]) {
            return mythis._cache[db_name]['views'][view_name] = {
              rows: [],
              invalid: [],
              'map': mymap,
              'reduce': myreduce
            };
          }
        },
        getView: function(db_name, view_name) {
          var view;
          view = this._cache[db_name]['views'][view_name];
          if (view.rows.length && view.invalid.length === 0) {
            return view;
          } else if (view.invalid.length > 0 && view.rows.length > 0) {
            this.generateView(db_name, view_name, view.invalid);
            return view;
          } else {
            this.generateView(db_name, view_name);
            return view;
          }
        },
        generateView: function(db_name, view_name, view_invalid) {
          var emit, memo, myrows, view;
          view = this._cache[db_name]['views'][view_name];
          if ((view_invalid != null ? view_invalid[0] : void 0) === 0) {
            view_invalid = false;
          }
          if (view_invalid) {
            myrows = [
              _.find(this._db[db_name], function(el) {
                return view_invalid.indexOf(el._id) !== -1;
              })
            ];
            view.rows = _.filter(view.rows, function(el) {
              return view_invalid.indexOf(el._id) === -1;
            });
          } else {
            myrows = this._db[db_name];
          }
          memo = {};
          emit = function(key, value, doc) {
            if (!view.rows) {
              view.rows = [];
            }
            view.rows.push({
              _id: doc._id,
              key: key,
              value: value
            });
            if (!view_invalid && view['reduce']) {
              return view['reduce'](memo, {
                key: key,
                value: value
              });
            }
          };
          _.each(myrows, function(doc, key) {
            var result;
            return result = view['map'](doc, emit);
          });
          if (view_invalid && view['reduce']) {
            _.each(view.rows, function(doc) {
              return view['reduce'](memo, {
                key: doc.key,
                value: doc.value
              });
            });
          }
          view.rows = _.sortBy(view.rows, function(el) {
            return el.key;
          });
          view.invalid = [];
          return view.result = memo;
        },
        refreshView: function(db_name, ids, new_value, old_value) {
          var mythis;
          mythis = this;
          _.each(ids, function(id) {
            var _ref;
            return _.each((_ref = mythis._cache[db_name]) != null ? _ref.views : void 0, function(view) {
              return view.invalid.push(id);
            });
          });
          return this.clearCache();
        },
        loadTasks: function() {
          return true;
        },
        clearCache2: function() {
          return _.each(this, function(fn) {
            if (fn) {
              return fn.cache = {};
            }
          });
        },
        getTasks: function() {
          return this._db.tasks;
        },
        getTasksByTreeId: _.memoize(function(tree_id, only_next) {
          var answer, answer1;
          answer = _.filter(this._db.tasks, function(el) {
            return el.tree_id === tree_id;
          });
          answer = _.sortBy(answer, function(el) {
            return el.date1;
          });
          if (only_next === true) {
            answer1 = _.find(answer, function(el) {
              return el.date1 && !el.did;
            });
            if (!answer1) {
              answer1 = _.find(answer, function(el) {
                return !el.did;
              });
            }
            if (answer1) {
              answer = [answer1];
            } else {
              answer = void 0;
            }
          } else {
            answer = _.sortBy(answer, function(el) {
              var res;
              if (el.date1) {
                res = -new Date(el.date1).getTime();
                res = res + 100000000000000;
              } else {
                res = new Date().getTime();
                res = res + 200000000000000;
              }
              if (el.did) {
                res = res + 500000000000000;
              }
              return res;
            });
          }
          if (answer) {
            return answer;
          } else {
            return [];
          }
        }, function(tree_id, only_next) {
          return tree_id + only_next;
        }),
        jsExpand: function(id, make_open) {
          var focus;
          console.time('expand');
          focus = $rootScope.$$childTail.set.focus;
          _.each(this._db.tree, function(el) {
            if (el._path && el._path.indexOf(id) !== -1) {
              if (!(make_open === true && el._childs > 50)) {
                if (el._childs > 0) {
                  el.panel[focus]._open = make_open;
                }
              } else {
                el._open = void 0;
              }
            }
          });
          return console.timeEnd('expand');
        },
        tree_template: function() {
          return {
            title: '',
            parent_id: '',
            _id: ''
          };
        },
        task_template: function() {
          return {
            title: '',
            parent_id: '',
            _id: ''
          };
        },
        getIcon: function(tree) {
          if (!tree.icon) {
            return 'icon-heart-empty';
          } else {
            return tree.icon;
          }
        },
        diffForSort: function(tree) {
          var found, parents;
          parents = this.db_parents['n' + tree.parent_id];
          parents = _.sortBy(parents, function(value) {
            return value.pos;
          });
          found = _.find(parents, function(value) {
            return value.pos > tree.pos;
          });
          if (found && found.pos) {
            console.info("POS = ", found.pos, tree.pos);
            return (parseInt(1000000000000 * (found.pos - tree.pos) / 1.1)) / 1000000000000;
          } else {
            return 1;
          }
        },
        jsAddNote: function(tree, make_child) {
          var focus, new_note;
          focus = $rootScope.$$childTail.set.focus;
          console.info("AddNote", tree);
          new_note = new this.tree_template;
          new_note.title = $rootScope.$$childTail.set.new_title;
          new_note._id = new ObjectId().toString();
          new_note['_new'] = true;
          new_note._focus_me = true;
          new_note.user_id = $rootScope.$$childTail.set.user_id;
          new_note.pos = tree.pos + this.diffForSort(tree);
          this._db.tree.push(new_note);
          if (!make_child) {
            new_note.parent_id = tree.parent_id;
            this.refreshParentsIndex(tree.parent_id);
          } else {
            new_note.parent_id = tree._id;
            this.refreshParentsIndex();
            tree._open = true;
          }
          $rootScope.$$childTail.db.main_node[focus] = new_note;
          return this.clearCache();
        },
        jsAddTask: function(event, scope, tree) {
          var mythis, new_task, new_value, old_value, tree_id;
          event.stopPropagation();
          event.preventDefault();
          mythis = $rootScope.$$childTail.fn.service.db_tree;
          console.info('add_task', event, scope, tree);
          tree_id = scope.db.main_node[scope.set.focus_edit]._id;
          if (tree_id) {
            new_task = new mythis.task_template;
            new_task._id = new ObjectId().toString();
            new_task.tree_id = tree_id;
            new_task.parent_id = tree_id;
            new_task._new = true;
            new_task.user_id = $rootScope.$$childTail.set.user_id;
            old_value = _.clone(new_task);
            new_task.title = scope.new_task_title;
            mythis._db.tasks.push(new_task);
            console.info('pushed new task', new_task);
            scope.new_task_title = "";
            mythis.clearCache();
            new_value = new_task;
            return $rootScope.$emit("jsFindAndSaveDiff", 'tasks', new_value, old_value);
          }
        },
        jsEnterPress: function(event, scope, tree) {
          return event.target.blur();
        },
        jsBlur: function(event, scope, tree) {
          if (false) {
            return tree['_new'] = false;
          }
        },
        jsFindPreviusParent: function(tree) {
          var found, parents;
          parents = $rootScope.$$childTail.fn.service.db_tree.db_parents['n' + tree.parent_id];
          parents = _.sortBy(parents, function(value) {
            return value.pos;
          });
          found = _.filter(parents, function(value) {
            return value.pos < tree.pos;
          });
          return found = found[found.length - 1];
        },
        jsEscPress: function(event, scope) {
          var focus, prev_note;
          focus = $rootScope.$$childTail.set.focus;
          prev_note = $rootScope.$$childTail.fn.service.db_tree.jsFindPreviusParent(scope.tree);
          if (scope.tree['_new']) {
            scope.tree.del = 1;
          }
          if (prev_note) {
            $rootScope.$$childTail.db.main_node[focus] = prev_note;
          }
          return event.target.blur();
        },
        findMaxPos: function(prev_note_id) {
          var parents;
          parents = $rootScope.$$childTail.fn.service.db_tree.db_parents['n' + prev_note_id];
          parents = _.sortBy(parents, function(value) {
            return value.pos;
          });
          if (parents.length) {
            return parents[parents.length - 1].pos + 1;
          } else {
            return 1;
          }
        },
        jsTabPress: function(event, scope, tree) {
          var db_tree, focus, main_node, parent_note, prev_note, shift;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (db_tree.jsIsTree()) {
            event.stopPropagation();
            event.preventDefault();
            main_node = $rootScope.$$childTail.db.main_node[focus];
            console.info(main_node);
            shift = event.shiftKey;
            if (!shift) {
              prev_note = db_tree.jsFindPreviusParent(main_node);
              if (prev_note) {
                prev_note.panel[focus]._open = true;
                main_node.parent_id = prev_note._id;
                main_node.pos = db_tree.findMaxPos(prev_note._id);
                main_node._focus_me = true;
                return db_tree.refreshParentsIndex();
              }
            } else {
              parent_note = db_tree.jsFind(main_node.parent_id);
              console.info({
                parent_note: parent_note
              });
              if (parent_note && parent_note.folder !== 'main') {
                main_node.parent_id = parent_note.parent_id;
                main_node.pos = parent_note.pos + db_tree.diffForSort(parent_note);
                main_node._focus_me = true;
                return db_tree.refreshParentsIndex();
              }
            }
          }
        },
        jsFindNext: function(tree, ignore_open) {
          var db_tree, focus, found, found_key, next, parents;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (tree && tree.panel[focus]._open && !ignore_open) {
            if (db_tree.db_parents['n' + tree._id]) {
              found = db_tree.db_parents['n' + tree._id][0];
            }
            return found;
          }
          parents = db_tree.db_parents['n' + tree.parent_id];
          parents = _.sortBy(parents, function(value) {
            return value.pos;
          });
          found_key = 0;
          found = _.find(parents, function(value, key) {
            if (value._id === tree._id) {
              found_key = key;
            }
            return value._id === tree._id;
          });
          found = parents[found_key + 1];
          if (!found) {
            console.info('need_to_parent');
            next = db_tree.jsFind(tree.parent_id);
            if (next) {
              found = db_tree.jsFindNext(next, 'ignore_open');
            }
          }
          return found;
        },
        jsFindPrev: function(tree, ignore_open, last_and_deep) {
          var db_tree, focus, found, found_key, parents;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if ((tree && tree._open2 && !ignore_open) || last_and_deep) {
            parents = db_tree.db_parents['n' + tree._id];
            found = parents[parents.length - 1];
            if (last_and_deep && found._open) {
              return db_tree.jsFindPrev(found, 'true', 'last_and_deep');
            } else {
              return found;
            }
          }
          parents = db_tree.db_parents['n' + tree.parent_id];
          parents = _.sortBy(parents, function(value) {
            return value.pos;
          });
          found_key = 0;
          found = _.find(parents, function(value, key) {
            if (value._id === tree._id) {
              found_key = key;
            }
            return value._id === tree._id;
          });
          found = parents[found_key - 1];
          if (found && found.panel[focus]._open) {
            found = db_tree.jsFindPrev(db_tree.jsFind(found._id), 'ignore_open', 'last_and_deep');
          }
          if (!found && !ignore_open && !last_and_deep) {
            if (tree.parent_id !== $rootScope.$$childTail.set.main_parent_id[focus]) {
              found = db_tree.jsFind(tree.parent_id);
            }
          }
          return found;
        },
        jsIsTree: function() {
          var focus, widget_index;
          focus = $rootScope.$$childTail.set.focus;
          widget_index = $rootScope.$$childTail.set.panel[focus].active;
          if ([0].indexOf(widget_index) !== -1) {
            return true;
          } else {
            return false;
          }
        },
        jsUpPress: function(event, scope) {
          var db_tree, focus, found;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (db_tree.jsIsTree()) {
            event.stopPropagation();
            event.preventDefault();
            found = db_tree.jsFindPrev($rootScope.$$childTail.db.main_node[focus]);
            if (found) {
              return $rootScope.$$childTail.db.main_node[focus] = found;
            }
          }
        },
        jsDownPress: function(event, scope) {
          var db_tree, focus, found;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (db_tree.jsIsTree()) {
            event.stopPropagation();
            event.preventDefault();
            found = db_tree.jsFindNext($rootScope.$$childTail.db.main_node[focus]);
            if (found) {
              return $rootScope.$$childTail.db.main_node[focus] = found;
            }
          }
        },
        jsLeftPress: function(event, scope) {
          var db_tree, focus;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (db_tree.jsIsTree()) {
            event.stopPropagation();
            event.preventDefault();
            if ($rootScope.$$childTail.db.main_node[focus].panel[focus]._open) {
              return $rootScope.$$childTail.db.main_node[focus].panel[focus]._open = false;
            } else {
              return true;
            }
          }
        },
        jsRightPress: function(event, scope) {
          var db_tree, focus;
          focus = $rootScope.$$childTail.set.focus;
          db_tree = $rootScope.$$childTail.fn.service.db_tree;
          if (db_tree.jsIsTree()) {
            event.stopPropagation();
            event.preventDefault();
            if (!$rootScope.$$childTail.db.main_node[focus].panel[focus]._open) {
              return $rootScope.$$childTail.db.main_node[focus].panel[focus]._open = true;
            } else {
              return true;
            }
          }
        },
        jsFocus1: function() {
          return $rootScope.$$childTail.set.focus = 0;
        },
        jsFocus2: function() {
          return $rootScope.$$childTail.set.focus = 1;
        },
        jsFocus3: function() {
          return $rootScope.$$childTail.set.focus = 2;
        },
        jsFocus4: function() {
          return $rootScope.$$childTail.set.focus = 3;
        },
        searchString: function(searchString, dont_need_highlight) {
          var dfd;
          dfd = new $.Deferred();
          console.info('search', searchString);
          oAuth2Api.jsGetToken().then(function(access_token) {
            return $http({
              url: '/api/v1/search',
              method: "GET",
              params: {
                user_id: '5330ff92898a2b63c2f7095f',
                access_token: access_token,
                search: searchString,
                dont_need_highlight: dont_need_highlight
              }
            }).then(function(result) {
              return dfd.resolve(result.data);
            });
          });
          return dfd.promise();
        },
        diaryFind: _.memoize(function(date) {
          var answer, key, mymap_diary, myreduce_diary, mythis;
          mythis = this;
          mymap_diary = function(doc, emit) {
            if (doc != null ? doc.diary : void 0) {
              return emit(doc.diary, doc, doc);
            }
          };
          myreduce_diary = function(memo, values) {
            var key;
            key = values.key;
            key = moment(values.key);
            key = key.format("YYYY-MM-DD");
            if (!memo[key]) {
              memo[key] = [];
            }
            if (values.value) {
              return memo[key].push(values.value);
            }
          };
          this.newView('tree', 'diary_by_date', mymap_diary, myreduce_diary);
          key = moment(date).format('YYYY-MM-DD');
          answer = mythis.getView('tree', 'diary_by_date').result[key];
          if (answer) {
            console.info(answer, date, answer.text);
          }
          return answer;
        }),
        diff: jsondiffpatch.create({
          objectHash: function(obj) {
            console.info("!!!", obj);
            return obj.name || obj.id || obj._id || obj._id || JSON.stringify(obj);
          }
        }),
        dfdTextLater: $q.defer(),
        getTextLater: _.throttle(function(text_id) {
          var mythis;
          mythis = this;
          $timeout(function() {
            return mythis.getText(text_id).then(function(text_element) {
              if (text_element) {
                return mythis.dfdTextLater.resolve(text_element);
              } else {
                console.info('text_not_found');
                return mythis.dfdTextLater.resolve();
              }
            });
          }, 1000);
          return mythis.dfdTextLater.promise;
        }, 3000),
        getTextFromDB: function(text_id) {
          var dfd, mythis;
          mythis = this;
          dfd = $q.defer();
          mythis.db.get('_diffs', text_id).done(function(patch_found) {
            console.info("!1:", patch_found);
            mythis.db.get('texts', text_id).done(function(found) {
              var new_text;
              if (found) {
                console.info("!2:", patch_found);
                if (patch_found) {
                  new_text = mythis.diff.patch({
                    txt: found.text
                  }, patch_found.patch);
                }
                if (new_text) {
                  found.text = new_text.txt.toString();
                }
                console.info("AFTER PATCH", new_text, found, patch_found.patch);
                dfd.resolve(found);
              } else {
                mythis.getTextLater(text_id).then(function(text_element) {
                  return dfd.resolve(text_element);
                });
              }
            });
          });
          return dfd.promise;
        },
        getText: function(text_id) {
          var dfd, mythis;
          mythis = this;
          dfd = $q.defer();
          this.getElement('texts', text_id).then(function(text_element) {
            return dfd.resolve(text_element);
          });
          return dfd.promise;
        },
        setText: function(text_id, new_text) {
          var found, mythis;
          mythis = this;
          if ((found = this._db['texts'][text_id])) {
            found.text = new_text;
            return mythis.saveDiff('texts', text_id);
          }
        },
        saveDiff: function(db_name, _id) {
          var mythis;
          mythis = this;
          this.getElement(db_name, _id).then(function(new_element) {
            mythis.getElementFromLocal(db_name, _id).then(function(old_element) {
              var el, patch, _ref;
              if (new_element && old_element) {
                patch = mythis.diff.diff(old_element, new_element);
                console.info('DIFF SAVED = ', JSON.stringify(patch), (_ref = JSON.stringify(patch)) != null ? _ref.length : void 0);
                el = {
                  _id: _id,
                  patch: patch,
                  db_name: db_name,
                  tm: new Date().getTime()
                };
                if (patch) {
                  mythis.db.put('_diffs', el).done(function() {
                    return console.info('diff_saved');
                  });
                }
              }
            });
          });
        },
        getElementFromLocalPlusDiffs: function(db_name, _id) {
          var dfd, mythis;
          dfd = $q.defer();
          mythis = this;
          this.getElementFromLocal(db_name, _id).then(function(result) {
            mythis.db.get('_diffs', _id).done(function(diff) {
              if (diff && diff._id && diff.db_name === db_name) {
                result = mythis.diff.patch(result, diff.patch);
                dfd.resolve(result);
              } else {
                dfd.resolve(result);
              }
            });
          });
          return dfd.promise;
        },
        getElementFromLocal: function(db_name, _id) {
          var dfd, mythis;
          mythis = this;
          dfd = $q.defer();
          this.db.get(db_name, _id).done(function(result) {
            return dfd.resolve(result);
          });
          return dfd.promise;
        },
        getElement: function(db_name, _id) {
          var dfd, found, mythis, _ref, _ref1;
          mythis = this;
          dfd = $q.defer();
          if (!_id) {
            dfd.resolve();
            return dfd.promise;
          }
          found = (_ref = this._db) != null ? (_ref1 = _ref[db_name]) != null ? _ref1[_id] : void 0 : void 0;
          if (!found && _id) {
            mythis.getElementFromLocalPlusDiffs(db_name, _id).then(function(found) {
              if (found) {
                mythis._db[db_name][found._id] = found;
              }
              return dfd.resolve(found);
            });
          } else {
            dfd.resolve(found);
          }
          return dfd.promise;
        }
      };
    }
  ]);

}).call(this);
