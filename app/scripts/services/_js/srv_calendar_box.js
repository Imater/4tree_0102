// Generated by CoffeeScript 1.6.3
(function () {
  angular.module("4treeApp").service('calendarBox', [
    '$translate', 'db_tree', '$rootScope', function ($translate, db_tree, $rootScope) {
      var _i, _results;
      return {
        _calendar_container: (function () {
          _results = [];
          for (_i = 1; _i <= 5000; _i++) {
            _results.push(_i);
          }
          return _results;
        }).apply(this),
        datasource: function () {
          var _j, _results1;
          return (function () {
            _results1 = [];
            for (_j = 1; _j <= 5000; _j++) {
              _results1.push(_j);
            }
            return _results1;
          }).apply(this);
        },
        constructor: function ($timeout) {
          this.$timeout = $timeout;
          return this.color = 'grey';
        },
        getDate: function (args) {
          return 1;
        },
        jsDateDiff: function (date2, only_days) {
          var answer, days, dif_sec, hours, minutes, now, pr2;
          answer = {
            text: "∞",
            "class": "nodate",
            image: ""
          };
          if (!date2) {
            return answer;
          }
          if (date2 === "0000-00-00 00:00:00") {
            return answer;
          }
          date2 = new Date(date2);
          answer["class"] = "";
          now = new Date;
          if (only_days) {
            now.setHours(0);
            now.setMinutes(0);
            now.setSeconds(0);
            date2 = new Date(date2);
            date2.setHours(0);
            date2.setMinutes(0);
            date2.setSeconds(0);
          }
          dif_sec = date2.getTime() - now;
          if (dif_sec > 0) {
            dif_sec += 1000;
          }
          if (dif_sec < 0) {
            dif_sec -= 1000;
          }
          days = parseInt(dif_sec / (60 * 1000 * 60 * 24), 10);
          minutes = parseInt(dif_sec / (60 * 1000), 10);
          if (only_days && days === 0) {
            minutes = 0;
          }
          if (days === 0) {
            if ((minutes > 59) || (minutes < -59)) {
              hours = parseInt(dif_sec / (60 * 1000 * 60) * 10, 10) / 10;
              answer.text = (minutes > 0 ? "+ " : "") + hours + " ч.";
            } else {
              answer.text = (minutes > 0 ? "+ " : "") + minutes + " мин.";
            }
            if (only_days) {
              answer.text = "сегодня";
            }
          } else {
            answer.text = (days > 0 ? "+ " : "") + days + " дн.";
          }
          if (days === 0) {
            if (minutes < 0) {
              answer["class"] = "datetoday past";
              pr2 = (-minutes / 480) * 100;
              if (pr2 > 80) {
                pr2 = 80;
              }
              answer.image = "background-image: -webkit-gradient(linear, left top, right top, color-stop(" + (pr2 - 25) + "%, #f56571), color-stop(" + (pr2 + 25) + "%, rgba(0,0,0,0))) !important;";
            }
            if (minutes >= 0) {
              answer["class"] = "datetoday";
            }
          } else {
            if (minutes < 0) {
              answer["class"] = "datepast";
            }
          }
          return answer;
        },
        getDates: function (args) {
          return this.getDate(args.today);
        },
        getDateBox: _.memoize(function (date) {
          var add, answer, day, fulldate, month, month1, myclass, week_day, year;
          if (!this.current_month) {
            this.current_month = (new Date()).getMonth();
          }
          day = date.getDate().toString();
          month1 = date.getMonth();
          year = date.getFullYear().toString().substr(2, 4);
          fulldate = date;
          week_day = $translate('WEEKDAY.' + (date.getDay()));
          month = $translate('MONTH.' + (month1 + 1));
          myclass = 'week_' + (date.getDay());
          if (date < new Date()) {
            myclass += " past";
          }
          if (date.toString() === new Date().toString()) {
            myclass += " today";
          }
          if (this.current_month % 2) {
            add = 1;
          }
          return answer = {
            day: day,
            month: month,
            year: year,
            week_day: week_day,
            myclass: myclass,
            fulldate: fulldate
          };
        }),
        getDays: _.memoize(function (date, only_days) {
          return this.jsDateDiff(date, only_days);
        }, function (date, only_days) {
          return date + parseInt(new Date().getTime() / 1000 / 120) + only_days;
        }),
        getCalendarForIndex: function ($index) {
          var date, element, key;
          $index = $index + $rootScope.$$childHead.set.from_today_index;
          date = new Date(new Date().getTime() + ($index - 3) * 24 * 60 * 60 * 1000);
          element = this.getDateBox(date);
          key = moment(element.fulldate).format('YYYY-MM-DD');
          element.tasks = db_tree.getView('tasks', 'tasks_by_date').result[key];
          _.each(element.tasks, function (task) {
            var tm;
            tm = moment(task.date2).format('HH:MM');
            return task._time = tm;
          });
          element.tasks = _.sortBy(element.tasks, function (task) {
            return task._time;
          });
          return element;
        },
        getToDoForIndex: function ($date) {
          var date, element, key;
          date = new Date($date);
          element = {};
          key = moment(date).format('YYYY-MM-DD');
          element.tasks = db_tree.getView('tasks', 'tasks_by_date').result[key];
          _.each(element.tasks, function (task) {
            var tm;
            tm = moment(task.date2).format('HH:MM');
            return task._time = tm;
          });
          element.tasks = _.sortBy(element.tasks, function (task) {
            return task._time;
          });
          return element;
        },
        getDateOfWeek: function (w, y) {
          var d;
          d = 1 + (w - 1) * 7;
          return new Date(y, 0, d);
        },
        getDateOfISOWeek: function (w, y) {
          var ISOweekStart, dow, simple;
          simple = new Date(y, 0, 1 + (w - 1) * 7);
          dow = simple.getDay();
          ISOweekStart = simple;
          if (dow <= 4) {
            ISOweekStart.setDate(simple.getDate() - simple.getDay() + 1);
          } else {
            ISOweekStart.setDate(simple.getDate() + 8 - simple.getDay());
          }
          return ISOweekStart;
        },
        getWeek: function (date) {
          var onejan;
          onejan = new Date(date.getFullYear(), 0, 1);
          return Math.ceil((((date - onejan) / 86400000) + onejan.getDay() + 1) / 7);
        },
        getWeekByMonth: function (month_number) {
          var date, this_week;
          date = new Date();
          this_week = this.getWeek(date);
          date.setMonth(month_number - 1);
          return this.getWeek(date) - this_week - 4;
        },
        getWeekByYear: function (month_number) {
          var date, this_week;
          date = new Date();
          this_week = this.getWeek(date);
          date.setYear(month_number);
          return this.getWeek(date) - this_week - 4;
        },
        getWeekCalendarForIndex: _.memoize(function ($index) {
          var convertGetDay, date, first_day_of_month, mythis, this_week, today, week;
          mythis = this;
          today = new Date();
          first_day_of_month = new Date(today.getFullYear(), today.getMonth(), 0);
          this_week = mythis.getWeek(new Date(first_day_of_month));
          week = [
            {},
            {},
            {},
            {},
            {},
            {}
          ];
          convertGetDay = [6, 0, 1, 2, 3, 4, 5];
          date = mythis.getDateOfISOWeek($index + this_week - 2, today.getFullYear());
          _.each([1, 2, 3, 4, 5, 6, 7], function (week_day) {
            var date_title, myclass, tasks, week_index;
            tasks = mythis.getToDoForIndex(date);
            myclass = (date.getMonth() + (today.getMonth() % 2 ? 1 : 0)) % 2 ? 'odd' : 'even';
            if (moment(date).format('YYYY-MM-DD') === moment(today).format('YYYY-MM-DD')) {
              myclass = myclass + ' today';
            }
            week_index = convertGetDay[date.getDay()];
            myclass = myclass + (week_index >= 5 ? ' weekend' : '');
            date_title = date.getDate();
            if (date.getDate() === 1) {
              date_title += ' ' + $translate('MONTH.' + (date.getMonth() + 1));
            }
            week[week_index] = {
              date: date_title,
              tasks: tasks,
              myclass: myclass
            };
            date = new Date(date.getTime() + 24 * 60 * 60 * 1000);
          });
          return week;
        })
      };
    }
  ]);

  angular.module("4treeApp").controller("WeekCalendarController", [
    '$scope', 'calendarBox', 'db_tree', '$translate', function ($scope, calendarBox, db_tree, $translate) {
      return $scope.$on('position.first', function (e, first, next, bufferSize) {
        var first_date, month_number;
        first_date = calendarBox.getDateOfISOWeek(next + bufferSize - 4, new Date().getFullYear());
        month_number = first_date.getMonth() + 1;
        $scope.this_month = $translate('MONTH_FULL.' + month_number);
        $scope.this_year = first_date.getFullYear();
        $scope.isWeek = true;
        $scope.monthes = [
          {
            title: 'Январь!',
            goto: calendarBox.getWeekByMonth(1)
          },
          {
            title: 'Февраль',
            goto: calendarBox.getWeekByMonth(2)
          },
          {
            title: 'Март',
            goto: calendarBox.getWeekByMonth(3)
          },
          {
            title: 'Апрель',
            goto: calendarBox.getWeekByMonth(4)
          },
          {
            title: 'Май',
            goto: calendarBox.getWeekByMonth(5)
          },
          {
            title: 'Июнь',
            goto: calendarBox.getWeekByMonth(6)
          },
          {
            title: 'Июль',
            goto: calendarBox.getWeekByMonth(7)
          },
          {
            title: 'Август',
            goto: calendarBox.getWeekByMonth(8)
          },
          {
            title: 'Сентябрь',
            goto: calendarBox.getWeekByMonth(9)
          },
          {
            title: 'Октябрь',
            goto: calendarBox.getWeekByMonth(10)
          },
          {
            title: 'Ноябрь',
            goto: calendarBox.getWeekByMonth(11)
          },
          {
            title: 'Декабрь',
            goto: calendarBox.getWeekByMonth(12)
          }
        ];
        return $scope.goTo = function (index) {
          return $scope.$$childHead.$emit('goto_index', index + 1);
        };
      });
    }
  ]);

  angular.module("4treeApp").controller("bigCalendarController", [
    '$scope', 'calendarBox', 'db_tree', '$translate', function ($scope, calendarBox, db_tree, $translate) {
      return $scope.$on('position.first', function (e, first, next, bufferSize) {
        var first_date, month_number;
        first_date = new Date(new Date().getTime() + (first + bufferSize + 1) * 24 * 60 * 60 * 1000);
        month_number = first_date.getMonth() + 1;
        $scope.this_month = $translate('MONTH_FULL.' + month_number);
        $scope.this_year = first_date.getFullYear();
        $scope.monthes = [
          {
            title: 'Январь',
            goto: 0
          },
          {
            title: 'Февраль',
            goto: 0
          },
          {
            title: 'Март',
            goto: 0
          },
          {
            title: 'Апрель',
            goto: 0
          },
          {
            title: 'Май',
            goto: 0
          },
          {
            title: 'Июнь',
            goto: 0
          },
          {
            title: 'Июль',
            goto: 0
          },
          {
            title: 'Август',
            goto: 0
          },
          {
            title: 'Сентябрь',
            goto: 0
          },
          {
            title: 'Октябрь',
            goto: 0
          },
          {
            title: 'Ноябрь',
            goto: 0
          },
          {
            title: 'Декабрь',
            goto: 0
          }
        ];
        return $scope.goTo = function (index) {
          return $scope.$$childHead.$emit('goto_index', index - 8);
        };
      });
    }
  ]);

}).call(this);
