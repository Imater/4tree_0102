// Generated by CoffeeScript 1.6.3
(function() {
  angular.module("4treeApp").service('syncApi', [
    '$translate', 'db_tree', function($translate, db_tree) {
      return {
        constructor: function() {
          this.color = 'grey';
          this.log_show = false;
          return this.sync_journal = [];
        },
        jsEach: function(elements, fn, name) {
          var mythis;
          if (name == null) {
            name = '';
          }
          mythis = this;
          return _.each(elements, function(el, key) {
            var dot, name1;
            if (!_.isObject(el)) {
              dot = name ? '.' : '';
              key = name + dot + key;
              return fn.call(this, el, key);
            } else {
              dot = name ? '.' : '';
              name1 = name + dot + key;
              return mythis.jsEach(el, fn, name1);
            }
          });
        },
        jsGetByPoints: function(obj, points, create_if_not_finded) {
          var prev_obj, split_point;
          split_point = points.split(".");
          prev_obj = obj;
          _.each(split_point, function(point, i) {
            prev_obj = obj;
            if (!obj[point]) {
              if (create_if_not_finded) {
                return obj = obj[point] = {};
              }
            } else {
              return obj = obj[point];
            }
          });
          return prev_obj;
        },
        jsDryObjectBySyncJournal: function() {
          var answer, mythis, tree;
          tree = db_tree.db_tree;
          mythis = this;
          if (this.log_show) {
            console.info('tree = ', tree);
          }
          if (this.log_show) {
            console.info('journal = ', mythis.sync_journal);
          }
          if (this.log_show) {
            console.info('--------------');
          }
          answer = [];
          _.each(mythis.sync_journal, function(jr) {
            var element, tree_by_id;
            tree_by_id = _.find(tree, function(el) {
              return el['n' + jr.id];
            });
            tree_by_id = tree_by_id['n' + jr.id];
            if (!tree_by_id) {
              return 0;
            }
            element = {
              id: jr.id,
              _tm: jr.tm
            };
            _.each(jr.changes, function(change_field_name) {
              var e, last_field_name, points;
              points = change_field_name.key.split('.');
              e = mythis.jsGetByPoints(element, change_field_name.key, 'create_if_not_finded');
              last_field_name = points[points.length - 1];
              return e[last_field_name] = mythis.jsGetByPoints(tree_by_id, change_field_name.key)[last_field_name];
            });
            return answer.push(element);
          });
          if (this.log_show) {
            console.info("ANSWER = ", answer);
          }
          return answer;
        },
        jsUnion: function(last_changes, changes) {
          _.each(changes, function(ch) {
            var finded;
            finded = _.find(last_changes, function(el) {
              return el.key === ch.key;
            });
            if (finded) {
              finded.tm = ch.tm;
            } else {
              last_changes.push({
                key: ch.key,
                tm: ch.tm
              });
            }
          });
          return last_changes;
        },
        jsAddToSyncJournal: function(new_element, old_element) {
          var answer, mythis;
          mythis = this;
          answer = {
            changes: []
          };
          mythis.jsEach(new_element, function(el, key) {
            var journal_exist, journal_exist_last, last_key, spl;
            spl = key.split(".");
            last_key = spl[spl.length - 1];
            if (el !== mythis.jsGetByPoints(old_element, key)[last_key] && last_key && last_key[0] !== '_' && last_key[0] !== '$') {
              answer.tm = new Date();
              answer.id = new_element.id;
              answer.changes.push({
                key: key,
                tm: new Date()
              });
              journal_exist = _.filter(mythis.sync_journal, function(el) {
                return el.id === answer.id;
              });
              journal_exist_last = _.max(journal_exist, function(el) {
                return el.tm;
              });
              if (_.isObject(journal_exist_last)) {
                journal_exist_last.changes = mythis.jsUnion(journal_exist_last.changes, answer.changes);
                return journal_exist_last.tm = new Date();
              } else {
                return mythis.sync_journal.push(answer);
              }
            }
          });
          return this.sync_journal;
        }
      };
    }
  ]);

}).call(this);
